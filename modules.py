import os
import random
import string
import subprocess
import asyncio
import platform
import sys
from telethon import events, TelegramClient
from datetime import datetime, timedelta
import telethon
import requests
import pyfiglet
from langdetect import detect, DetectorFactory
import re
import importlib.util
from config import API_ID, API_HASH, BOT_TOKEN

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
DetectorFactory.seed = 0
start_time = datetime.now()

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
received_messages_count = 0
sent_messages_count = 0
active_users = set()
MODS_DIRECTORY = 'source/mods/'
loaded_modules = []

client = TelegramClient(f'acroka_session_{API_ID}', API_ID, API_HASH)
GIF_URL = "https://tenor.com/vzU4iQebtgZ.gif"
GIF_FILENAME = "welcome.gif"
PREFIX_FILE = os.path.join('source', 'prefix.txt')
DEFAULT_PREFIX = '.'
RESTART_CMD = [sys.executable] + sys.argv

async def is_owner(event):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å –≤–ª–∞–¥–µ–ª—å—Ü–µ–º —Å–µ—Å—Å–∏–∏."""
    me = await event.client.get_me()
    return event.sender_id == me.id

def get_module_info(module_name):
    try:
        module_path = os.path.join(MODS_DIRECTORY, f"{module_name}.py")
        with open(module_path, 'r', encoding='utf-8') as f:
            lines = [f.readline().strip() for _ in range(4)]

        name = commands = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
        for line in lines:
            if line.startswith("#"):
                key, value = line[1:].split(":", 1)
                if key.strip() == "name":
                    name = value.strip()
                elif key.strip() == "commands":
                    commands = value.strip()

        return f"{name} ({commands})"
    except Exception:
        return f"{module_name} (–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ)"
        
def get_loaded_modules():
    modules = []
    if os.path.exists(MODS_DIRECTORY):
        for filename in os.listdir(MODS_DIRECTORY):
            if filename.endswith(".py"):
                module_name = filename[:-3]
                modules.append(module_name)
    return modules

def get_prefix():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –ø—Ä–µ—Ñ–∏–∫—Å–∞ –∫–æ–º–∞–Ω–¥"""
    if os.path.exists(PREFIX_FILE):
        with open(PREFIX_FILE, 'r') as f:
            prefix = f.read().strip()
            return prefix if len(prefix) == 1 else DEFAULT_PREFIX
    return DEFAULT_PREFIX

async def restart_bot(event=None):
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    if event:
        await event.edit("üîÑ –Æ–∑–µ—Ä–±–æ—Ç –ê–∫—Ä–æ–∫–∞ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–¥–æ–∂–¥–∏—Ç–µ...")
    print("üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —é–∑–µ—Ä–±–æ—Ç–∞...")
    os.execv(sys.executable, RESTART_CMD)

async def handle_help(event):
    if not await is_owner(event):
        return
    
    global received_messages_count, active_users
    received_messages_count += 1
    active_users.add(event.sender_id)

    modules_list = get_loaded_modules()
    prefix = get_prefix()
    base_commands = [
        f"üìú {prefix}info - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —é–∑–µ—Ä–±–æ—Ç–µ",
        f"üèì {prefix}ping - –ø–∏–Ω–≥ —Å–∏—Å—Ç–µ–º—ã",
        f"‚ùì {prefix}help - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–æ–º–∞–Ω–¥—ã",
        f"üì¶ {prefix}loadmod - –∑–∞–≥—Ä—É–∑–∏—Ç—å –º–æ–¥—É–ª—å",
        f"üîÑ {prefix}unloadmod - —É–¥–∞–ª–∏—Ç—å –º–æ–¥—É–ª—å",
        f"‚è≥ {prefix}deferral - –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è",
        f"üßÆ {prefix}calc - –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä",
        f"üíª {prefix}tr - –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫",
        f"üîÑ {prefix}update - –æ–±–Ω–æ–≤–∏—Ç—å –±–æ—Ç–∞",
        f"‚öôÔ∏è {prefix}setprefix - –∏–∑–º–µ–Ω–∏—Ç—å –ø—Ä–µ—Ñ–∏–∫—Å –∫–æ–º–∞–Ω–¥",
        f"üîÑ {prefix}restart - –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å —é–∑–µ—Ä–±–æ—Ç–∞"
    ]

    message = f"üí° –ö–æ–º–∞–Ω–¥—ã —é–∑–µ—Ä–±–æ—Ç–∞ (–ø—Ä–µ—Ñ–∏–∫—Å: '{prefix}')\n\n"
    if modules_list:
        message += "‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –º–æ–¥—É–ª–∏:\n"
        message += "\n".join(f"   - {get_module_info(m)}" for m in modules_list)
    else:
        message += "‚ùå –ù–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –º–æ–¥—É–ª–µ–π.\n"
    
    message += "\n‚úÖ –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n" + "\n".join(base_commands)
    await event.edit(message)

async def handle_info(event):
    if not await is_owner(event):
        return
    
    global received_messages_count, active_users
    received_messages_count += 1
    active_users.add(event.sender_id)

    uptime = str(datetime.now() - start_time).split('.')[0]
    user_name = (await event.client.get_me()).first_name
    
    info_msg = (
        f"üîç Acroka - UserBot\n\n"
        f"üë§ –í–ª–∞–¥–µ–ª–µ—Ü: {user_name}\n"
        f"üíª –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞: {platform.system()}\n"
        f"‚è≥ –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {uptime}\n"
        f"‚ú® Telethon: {telethon.__version__}\n"
        f"üì• –ü–æ–ª—É—á–µ–Ω–æ: {received_messages_count}\n"
        f"üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {sent_messages_count}\n"
        f"üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(active_users)}\n"
        f"üü¢ –°—Ç–∞—Ç—É—Å: –ê–∫—Ç–∏–≤–µ–Ω"
    )
    await event.edit(info_msg)

async def handle_ping(event):
    if not await is_owner(event):
        return
    
    global received_messages_count, active_users
    received_messages_count += 1
    active_users.add(event.sender_id)

    try:
        proc = await asyncio.create_subprocess_exec(
            'ping', '-c', '1', 'google.com',
            stdout=asyncio.subprocess.PIPE,
            stderr=asyncio.subprocess.PIPE
        )
        stdout, _ = await proc.communicate()
        
        if proc.returncode == 0:
            time = stdout.decode().split('time=')[1].split()[0]
            await event.edit(f"‚úÖ –ü–∏–Ω–≥: {time}")
        else:
            await event.edit("‚ùå –û—à–∏–±–∫–∞ –ø–∏–Ω–≥–∞!")
    except Exception as e:
        await event.edit(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

async def load_module(module_name):
    try:
        spec = importlib.util.spec_from_file_location(
            module_name, 
            os.path.join(MODS_DIRECTORY, f"{module_name}.py")
        )
        module = importlib.util.module_from_spec(spec)
        spec.loader.exec_module(module)
        
        if module_name not in loaded_modules:
            loaded_modules.append(module_name)
            if hasattr(module, 'on_load'):
                await module.on_load(client)
        return module
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥—É–ª—è {module_name}: {e}")
        return None

async def handle_loadmod(event):
    if not await is_owner(event):
        return
    
    if event.is_reply:
        reply = await event.get_reply_message()
        if reply.media:
            file = await reply.download_media(MODS_DIRECTORY)
            module_name = os.path.splitext(os.path.basename(file))[0]
            
            if await load_module(module_name):
                await event.edit(f"‚úÖ –ú–æ–¥—É–ª—å '{module_name}' –∑–∞–≥—Ä—É–∂–µ–Ω!")
            else:
                await event.edit(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ '{module_name}'")
            return
    
    await event.edit("‚ùå –û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–∞–π–ª–æ–º .py")

async def handle_unloadmod(event):
    if not await is_owner(event):
        return
    
    module_name = event.pattern_match.group(1)
    module_path = os.path.join(MODS_DIRECTORY, f"{module_name}.py")
    
    if os.path.exists(module_path):
        os.remove(module_path)
        if module_name in loaded_modules:
            loaded_modules.remove(module_name)
        await event.edit(f"‚úÖ –ú–æ–¥—É–ª—å '{module_name}' —É–¥–∞–ª—ë–Ω")
    else:
        await event.edit(f"‚ùå –ú–æ–¥—É–ª—å '{module_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω")

async def translate_handler(event):
    if not await is_owner(event):
        return
    
    global received_messages_count, active_users
    received_messages_count += 1
    active_users.add(event.sender_id)

    if not event.is_reply:
        await event.reply("‚ùó –û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞")
        return
    
    target_lang = event.pattern_match.group(1)
    replied = await event.get_reply_message()
    
    try:
        url = f"https://api.mymemory.translated.net/get?q={replied.text}&langpair={detect(replied.text)}|{target_lang}"
        response = requests.get(url).json()
        translated = response['responseData']['translatedText']
        await event.edit(translated)
    except Exception as e:
        await event.edit(f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞: {str(e)}")

class DeferredMessage:
    def __init__(self, client):
        self.client = client
    
    async def handler(self, event):
        if not await is_owner(event):
            return
        
        global received_messages_count, active_users, sent_messages_count
        received_messages_count += 1
        active_users.add(event.sender_id)

        try:
            _, count, minutes, text = event.message.text.split(' ', 3)
            count = int(count)
            interval = int(minutes) * 60
        except:
            await event.edit(f"‚ùó –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: {get_prefix()}deferral <–∫–æ–ª-–≤–æ> <–º–∏–Ω> <—Ç–µ–∫—Å—Ç>")
            return

        msg = await event.reply(f"‚úÖ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ {count} —Å–æ–æ–±—â–µ–Ω–∏–π —Å –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º {minutes} –º–∏–Ω")
        
        for i in range(count):
            send_time = datetime.now() + timedelta(seconds=interval*i)
            await self.client.send_message(
                event.chat_id, 
                text, 
                schedule=send_time
            )
            sent_messages_count += 1
            await msg.edit(f"üì¨ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {i+1}/{count}")

async def calc_handler(event):
    if not await is_owner(event):
        return
    
    global received_messages_count, active_users
    received_messages_count += 1
    active_users.add(event.sender_id)

    expr = re.sub(r'[^0-9+\-*/. ()]', '', event.pattern_match.group(1))
    try:
        result = eval(expr)
        await event.edit(f"üí° –†–µ–∑—É–ª—å—Ç–∞—Ç: {result}")
    except Exception as e:
        await event.edit(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

async def update_handler(event):
    if not await is_owner(event):
        return
    
    try:
        await event.edit("üîÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π —é–∑–µ—Ä–±–æ—Ç–∞...")
        repo = "https://github.com/ItKenneth/AcrokaUB.git"
        
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        temp_dir = "temp_update"
        if os.path.exists(temp_dir):
            subprocess.run(['rm', '-rf', temp_dir])
        
        # –ö–ª–æ–Ω–∏—Ä—É–µ–º —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π
        subprocess.run(['git', 'clone', repo, temp_dir], check=True)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≤–∞–∂–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
        required_files = ['modules.py', 'config.py', 'main.py']
        for file in required_files:
            if not os.path.exists(os.path.join(temp_dir, file)):
                raise Exception(f"–§–∞–π–ª {file} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏")
        
        # –ö–æ–ø–∏—Ä—É–µ–º —Ñ–∞–π–ª—ã
        for file in required_files:
            src = os.path.join(temp_dir, file)
            if os.path.exists(src):
                os.replace(src, file)
        
        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
        subprocess.run(['rm', '-rf', temp_dir])
        
        await event.edit("‚úÖ –Æ–∑–µ—Ä–±–æ—Ç —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω! –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞...")
        await restart_bot()
    except Exception as e:
        await event.edit(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏: {str(e)}")

async def handle_setprefix(event):
    if not await is_owner(event):
        return
    
    global received_messages_count, active_users
    received_messages_count += 1
    active_users.add(event.sender_id)

    new_prefix = event.pattern_match.group(1).strip()
    
    if len(new_prefix) != 1:
        await event.edit("‚ùå –ü—Ä–µ—Ñ–∏–∫—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ–¥–Ω–∏–º —Å–∏–º–≤–æ–ª–æ–º!")
        return
    
    try:
        os.makedirs('source', exist_ok=True)
        with open(PREFIX_FILE, 'w') as f:
            f.write(new_prefix)
        
        await event.edit(f"‚úÖ –ü—Ä–µ—Ñ–∏–∫—Å –∏–∑–º–µ–Ω—ë–Ω –Ω–∞ '{new_prefix}'! –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞...")
        await asyncio.sleep(2)
        await restart_bot()
    except Exception as e:
        await event.edit(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –ø—Ä–µ—Ñ–∏–∫—Å–∞: {str(e)}")

async def handle_restart(event):
    if not await is_owner(event):
        return
    
    await restart_bot(event)

async def load_all_modules():
    if os.path.exists(MODS_DIRECTORY):
        for file in os.listdir(MODS_DIRECTORY):
            if file.endswith('.py'):
                await load_module(file[:-3])

async def download_gif():
    if not os.path.exists(GIF_FILENAME):
        try:
            response = requests.get(GIF_URL, stream=True)
            if response.status_code == 200:
                with open(GIF_FILENAME, 'wb') as f:
                    for chunk in response.iter_content(1024):
                        f.write(chunk)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ GIF: {e}")

def register_event_handlers(client, prefix=None):
    if prefix is None:       
        prefix = get_prefix()
    deferred = DeferredMessage(client)
    
    handlers = [
        (rf'^{prefix}help$', handle_help),
        (rf'^{prefix}info$', handle_info),
        (rf'^{prefix}ping$', handle_ping),
        (rf'^{prefix}loadmod$', handle_loadmod),
        (rf'^{prefix}unloadmod (\w+)$', handle_unloadmod),
        (rf'^{prefix}tr (\w{{2}})$', translate_handler),
        (rf'^{prefix}calc (.+)$', calc_handler),
        (rf'^{prefix}deferral (\d+) (\d+) (.+)$', deferred.handler),
        (rf'^{prefix}update$', update_handler),
        (rf'^{prefix}setprefix (.+)$', handle_setprefix),
        (rf'^{prefix}restart$', handle_restart)
    ]

    for pattern, handler in handlers:
        client.add_event_handler(
            handler, 
            events.NewMessage(pattern=pattern)
        )

async def run_bot(token):
    print(pyfiglet.figlet_format("Acroka"))
    print("üöÄ –ó–∞–ø—É—Å–∫ —é–∑–µ—Ä–±–æ—Ç–∞...")
    
    try:
        await download_gif()
        await load_all_modules()

        # –°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ —Å —Ç–æ–∫–µ–Ω–æ–º
        bot_client = TelegramClient(f'acroka_bot_{API_ID}', API_ID, API_HASH)
        await bot_client.start(bot_token=BOT_TOKEN)

        # –ó–∞—Ç–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        register_event_handlers(bot_client)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–ø—É—Å–∫–µ
        async def send_start_message():
            try:
                if os.path.exists(GIF_FILENAME):
                    await bot_client.send_file(
                        await bot_client.get_me(),
                        GIF_FILENAME,
                        caption='üëã –Æ–∑–µ—Ä–±–æ—Ç –ê–∫—Ä–æ–∫–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!\nüìå –ò—Å–ø–æ–ª—å–∑—É–π .help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥',
                        parse_mode='markdown'
                    )
                else:
                    await bot_client.send_message(
                        await bot_client.get_me(),
                        'üëã –Æ–∑–µ—Ä–±–æ—Ç –ê–∫—Ä–æ–∫–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!'
                    )
            except Exception as e:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ start —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

        # –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Ñ–æ–Ω–µ
        asyncio.create_task(send_start_message())

        print("‚úÖ –Æ–∑–µ—Ä–±–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!")
        await bot_client.run_until_disconnected()

    except Exception as e:
        print(f"üõë –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —é–∑–µ—Ä–±–æ—Ç–∞: {e}")
    finally:
        if 'bot_client' in locals() and bot_client.is_connected():
            await bot_client.disconnect()

def generate_username():
    random_part = ''.join(random.choices(string.ascii_lowercase + string.digits, k=5))
    return f'acroka_{random_part}_bot'

if __name__ == "__main__":
    asyncio.run(run_bot())
