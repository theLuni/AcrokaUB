import os
import sys
import subprocess 
import importlib
import asyncio
import re
import shutil
from bs4 import BeautifulSoup
import traceback
import platform
import telethon
import psutil
import socket
import uuid
from datetime import datetime, timedelta
from telethon import TelegramClient, events
from telethon.tl.types import Message
from config import API_ID, API_HASH
import requests
from googletrans import Translator

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
MODS_DIR = 'source/mods/'
PREFIX_FILE = 'source/prefix.txt'
DEFAULT_PREFIX = '.'
LOADED_MODS_FILE = '.loaded_mods'
SESSION_FILE = 'userbot_session'
GITHUB_REPO = "https://github.com/theLuni/AcrokaUB"
MODS_REPO = "https://github.com/theLuni/AcrokaUB-Modules"
RAW_MODS_URL = "https://raw.githubusercontent.com/theLuni/AcrokaUB-Modules/main/"
DOCS_URL = "https://github.com/theLuni/AcrokaUB/wiki"
BACKUP_DIR = 'source/backups/'
LOG_FILE = 'userbot.log'

class ModuleFinder:
    def __init__(self, repo_url):
        self.repo_url = repo_url
        self.modules = self._load_modules()

    def _load_modules(self):
        """–ó–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –º–æ–¥—É–ª–µ–π –∏–∑ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è."""
        response = requests.get(self.repo_url)
        response.raise_for_status()  # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞
        
        soup = BeautifulSoup(response.text, 'html.parser')
        links = soup.find_all('a', class_='js-navigation-open link-gray')

        modules = {}
        for link in links:
            module_name = link.get_text()
            modules[module_name] = self._load_module_description(module_name)
        
        return modules

    def _load_module_description(self, module_name):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ –º–æ–¥—É–ª—è –∏–∑ —Ñ–∞–π–ª–∞ –Ω–∞ GitHub."""
        raw_url = f"https://raw.githubusercontent.com/theLuni/AcrokaUB/main/{module_name}"
        try:
            module_content = requests.get(raw_url).text
            docstring = re.search(r'\"\"\"(.*?)\"\"\"', module_content, re.DOTALL)
            return docstring.group(1).strip().split('\n')[0] if docstring else "–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è"
        except Exception:
            return "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ–ø–∏—Å–∞–Ω–∏—è"

    def search_modules(self, search_query):
        """–ò—â–µ—Ç –º–æ–¥—É–ª–∏ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º."""
        search_query = search_query.lower()
        found_modules = {
            name: desc for name, desc in self.modules.items() 
            if search_query in name.lower()
        }
        return found_modules
        
class ModuleManager:
    def __init__(self, client):
        self.client = client
        self.modules = {}
        self.prefix = DEFAULT_PREFIX
        self.start_time = datetime.now()
        self.session_id = str(uuid.uuid4())[:8]
        self.version = self._get_git_version() or "1.0.0"
        self.last_update_time = self._get_last_commit_date() or datetime.now().strftime('%Y-%m-%d %H:%M:%S')
        os.makedirs(MODS_DIR, exist_ok=True)
        os.makedirs(BACKUP_DIR, exist_ok=True)
        self._setup_logging()

    def _get_git_version(self):
        """–ü–æ–ª—É—á–∞–µ–º –≤–µ—Ä—Å–∏—é –∏–∑ git —Ç–µ–≥–æ–≤"""
        try:
            if not os.path.exists('.git'):
                return None
                
            process = os.popen('git describe --tags --abbrev=0 2>/dev/null')
            version = process.read().strip()
            process.close()
            return version if version else None
        except:
            return None

    def _get_last_commit_date(self):
        """–ü–æ–ª—É—á–∞–µ–º –¥–∞—Ç—É –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∫–æ–º–º–∏—Ç–∞"""
        try:
            if not os.path.exists('.git'):
                return None
                
            process = os.popen('git log -1 --format=%cd --date=format:"%Y-%m-%d %H:%M:%S"')
            date = process.read().strip()
            process.close()
            return date if date else None
        except:
            return None

    def _setup_logging(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
        import logging
        logging.basicConfig(
            filename=LOG_FILE,
            level=logging.INFO,
            format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
        )
        self.logger = logging.getLogger('AcrokaUB')

    async def _backup_module(self, module_path: str):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ –º–æ–¥—É–ª—è"""
        if not os.path.exists(module_path):
            return
            
        backup_dir = os.path.join(BACKUP_DIR, datetime.now().strftime('%Y-%m-%d'))
        os.makedirs(backup_dir, exist_ok=True)
        
        backup_path = os.path.join(backup_dir, os.path.basename(module_path))
        shutil.copy2(module_path, backup_path)
        self.logger.info(f"Created backup of {module_path} at {backup_path}")

    async def load_module(self, module_name: str) -> bool:
        try:
            self._clean_cache(module_name)
            module_path = os.path.join(MODS_DIR, f"{module_name}.py")
            
            await self._backup_module(module_path)
            
            if not await self._check_dependencies(module_path):
                return False
                
            spec = importlib.util.spec_from_file_location(
                f"userbot.mods.{module_name}", 
                module_path
            )
            module = importlib.util.module_from_spec(spec)
            sys.modules[f"userbot.mods.{module_name}"] = module
            spec.loader.exec_module(module)
            
            handlers = []
            if hasattr(module, 'on_load'):
                handlers = await module.on_load(self.client, self.prefix) or []
            
            self.modules[module_name] = {
                'module': module,
                'path': module_path,
                'handlers': handlers,
                'loaded_at': datetime.now(),
                'load_count': 1
            }
            
            print(f"‚úÖ [–ú–æ–¥—É–ª—å] {module_name} —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω")
            self.logger.info(f"Module {module_name} loaded successfully")
            return True
            
        except Exception as e:
            error_msg = f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –º–æ–¥—É–ª—å {module_name}: {str(e)}"
            print(f"‚ùå [–û—à–∏–±–∫–∞] {error_msg}")
            self.logger.error(error_msg, exc_info=True)
            if os.path.exists(module_path):
                os.remove(module_path)
            return False

    async def _check_dependencies(self, module_path: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –º–æ–¥—É–ª—è"""
        try:
            with open(module_path, 'r', encoding='utf-8') as f:
                content = f.read()
            
            requires = re.search(r'#\s*requires?:\s*(.+)', content)
            if not requires:
                return True
                
            dependencies = [dep.strip() for dep in requires.group(1).split(',')]
            print(f"üîç [–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏] –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –¥–ª—è –º–æ–¥—É–ª—è: {', '.join(dependencies)}")
            self.logger.info(f"Installing dependencies: {', '.join(dependencies)}")
            
            process = await asyncio.create_subprocess_shell(
                f"{sys.executable} -m pip install --upgrade {' '.join(dependencies)}",
                stdout=asyncio.subprocess.PIPE,
                stderr=asyncio.subprocess.PIPE
            )
            
            stdout, stderr = await process.communicate()
            
            if process.returncode != 0:
                error_msg = f"–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏:\n{stderr.decode()}"
                print(f"‚ùå [–û—à–∏–±–∫–∞] {error_msg}")
                self.logger.error(error_msg)
                return False
                
            print(f"‚úÖ [–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏] –£—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã: {', '.join(dependencies)}")
            self.logger.info(f"Dependencies installed: {', '.join(dependencies)}")
            return True
            
        except Exception as e:
            error_msg = f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π: {str(e)}"
            print(f"‚ùå [–û—à–∏–±–∫–∞] {error_msg}")
            self.logger.error(error_msg, exc_info=True)
            return False

    async def reload_module(self, module_name: str) -> bool:
        if module_name not in self.modules:
            return await self.load_module(module_name)
            
        if not await self.unload_module(module_name):
            return False
            
        if await self.load_module(module_name):
            self.modules[module_name]['load_count'] += 1
            return True
        return False

    async def unload_module(self, module_name: str) -> bool:
        if module_name not in self.modules:
            return False
            
        module_data = self.modules[module_name]
        
        try:
            if hasattr(module_data['module'], 'on_unload'):
                await module_data['module'].on_unload()
            
            for handler in module_data['handlers']:
                self.client.remove_event_handler(handler)
            
            del sys.modules[f"userbot.mods.{module_name}"]
            del self.modules[module_name]
            
            self._clean_cache(module_name)
            
            print(f"‚úÖ [–ú–æ–¥—É–ª—å] {module_name} –≤—ã–≥—Ä—É–∂–µ–Ω")
            self.logger.info(f"Module {module_name} unloaded")
            return True
            
        except Exception as e:
            error_msg = f"–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–≥—Ä—É–∑–∏—Ç—å –º–æ–¥—É–ª—å {module_name}: {str(e)}"
            print(f"‚ùå [–û—à–∏–±–∫–∞] {error_msg}")
            self.logger.error(error_msg, exc_info=True)
            return False

    def _clean_cache(self, module_name: str):
        """–û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞ –º–æ–¥—É–ª—è"""
        cache_dir = os.path.join(MODS_DIR, '__pycache__')
        if os.path.exists(cache_dir):
            shutil.rmtree(cache_dir)
        
        for root, _, files in os.walk(MODS_DIR):
            for file in files:
                if file.startswith(module_name) and file.endswith('.pyc'):
                    os.remove(os.path.join(root, file))

    async def load_all_modules(self):
        print(f"üîç [–°–∏—Å—Ç–µ–º–∞] –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥—É–ª–µ–π...")
        
        if not os.path.exists(LOADED_MODS_FILE):
            for filename in os.listdir(MODS_DIR):
                if filename.endswith('.py') and not filename.startswith('_'):
                    await self.load_module(filename[:-3])
        else:
            with open(LOADED_MODS_FILE, 'r') as f:
                for module_name in f.read().splitlines():
                    if module_name:
                        await self.load_module(module_name)
            os.remove(LOADED_MODS_FILE)
        
        print(f"üì¶ [–°–∏—Å—Ç–µ–º–∞] –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(self.modules)} –º–æ–¥—É–ª–µ–π")

    async def save_loaded_modules(self):
        with open(LOADED_MODS_FILE, 'w') as f:
            f.write('\n'.join(self.modules.keys()))
            
    async def download_module(self, url: str) -> str:
        """–°–∫–∞—á–∏–≤–∞–Ω–∏–µ –º–æ–¥—É–ª—è –ø–æ URL"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ URL –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–º—É —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—é
            if not url.startswith(RAW_MODS_URL):
                raise ValueError("–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π URL –º–æ–¥—É–ª—è. –†–∞–∑—Ä–µ—à–µ–Ω—ã —Ç–æ–ª—å–∫–æ –º–æ–¥—É–ª–∏ –∏–∑ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–≥–æ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è.")
                
            module_name = os.path.basename(url)
            module_path = os.path.join(MODS_DIR, module_name)
            
            response = requests.get(url)
            response.raise_for_status()
            
            with open(module_path, 'wb') as f:
                f.write(response.content)
                
            return module_path
        except Exception as e:
            self.logger.error(f"Error downloading module: {str(e)}")
            if os.path.exists(module_path):
                os.remove(module_path)
            raise


class CoreCommands:
    def __init__(self, manager):
        self.manager = manager
        self.owner_id = None
        self.repo_url = GITHUB_REPO
        self.docs_url = DOCS_URL
        self.connected_services = {
            'Telegram API': True,
            'Translator API': True,
            'Git': os.path.exists('.git')
        }
    
    async def initialize(self):
        me = await self.manager.client.get_me()
        self.owner_id = me.id
        print(f"üîê [–°–∏—Å—Ç–µ–º–∞] –í–ª–∞–¥–µ–ª–µ—Ü ID: {self.owner_id}")
        self.manager.logger.info(f"Bot started for user ID: {self.owner_id}")

    async def is_owner(self, event: Message) -> bool:
        if event.sender_id == self.owner_id:
            return True
        try:
            await event.delete()
        except:
            pass
        return False

    def get_system_info(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–∏—Å—Ç–µ–º–µ"""
        try:
            mem = psutil.virtual_memory()
            disk = psutil.disk_usage('/')
            
            return {
                'memory': {
                    'used': round(mem.used / 1024 / 1024, 1),
                    'total': round(mem.total / 1024 / 1024, 1),
                    'percent': mem.percent
                },
                'cpu': {
                    'cores': psutil.cpu_count(),
                    'usage': psutil.cpu_percent()
                },
                'uptime': str(datetime.now() - datetime.fromtimestamp(psutil.boot_time())).split('.')[0]
            }
        except Exception as e:
            self.manager.logger.error(f"Error getting system info: {str(e)}")
            return None

    async def handle_help(self, event: Message):
        if not await self.is_owner(event):
            return
            
        prefix = self.manager.prefix
        
        help_msg = [
            f"‚ú® <b>Acroka UserBot Help (Session ID: {self.manager.session_id})</b> ‚ú®.",
            "",
            "‚öôÔ∏è <b>–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>",
            f"‚Ä¢ <code>{prefix}help</code> - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ",
            f"‚Ä¢ <code>{prefix}ping</code> - –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∏–Ω–≥–∞",
            f"‚Ä¢ <code>{prefix}info</code> - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ",
            f"‚Ä¢ <code>{prefix}update</code> - –û–±–Ω–æ–≤–∏—Ç—å –±–æ—Ç–∞",
            f"‚Ä¢ <code>{prefix}restart</code> - –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞",
            "",
            "üì¶ <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–æ–¥—É–ª—è–º–∏:</b>",
            f"‚Ä¢ <code>{prefix}lm</code> - –ó–∞–≥—Ä—É–∑–∏—Ç—å –º–æ–¥—É–ª—å",
            f"‚Ä¢ <code>{prefix}gm [name]</code> - –ü–æ–ª—É—á–∏—Ç—å –º–æ–¥—É–ª—å",
            f"‚Ä¢ <code>{prefix}ulm [name]</code> - –£–¥–∞–ª–∏—Ç—å –º–æ–¥—É–ª—å",
            f"‚Ä¢ <code>{prefix}rlm [name]</code> - –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å –º–æ–¥—É–ª—å",
            f"‚Ä¢ <code>{prefix}mlist</code> - –°–ø–∏—Å–æ–∫ –º–æ–¥—É–ª–µ–π",
            "",
            "üõ†Ô∏è <b>–£—Ç–∏–ª–∏—Ç—ã:</b>",
            f"‚Ä¢ <code>{prefix}tr [lang]</code> - –ü–µ—Ä–µ–≤–æ–¥—á–∏–∫",
            f"‚Ä¢ <code>{prefix}calc [expr]</code> - –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä",
            f"‚Ä¢ <code>{prefix}clean</code> - –û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞",
            f"‚Ä¢ <code>{prefix}logs</code> - –ü–æ–ª—É—á–∏—Ç—å –ª–æ–≥–∏"
        ]
        
        if self.manager.modules:
            help_msg.extend(["", "üîå <b>–ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –º–æ–¥—É–ª–∏:</b>"])
            for mod_name in self.manager.modules.keys():
                help_msg.append(f"‚Ä¢ <code>{mod_name}</code>")

        await event.edit("\n".join(help_msg), parse_mode='html')

    async def handle_logs(self, event: Message):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –ª–æ–≥–æ–≤"""
        if not await self.is_owner(event):
            return
            
        try:
            if not os.path.exists(LOG_FILE):
                await event.edit("‚ÑπÔ∏è –§–∞–π–ª –ª–æ–≥–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return
                
            await event.delete()
            await self.manager.client.send_file(
                event.chat_id,
                LOG_FILE,
                caption=f"üìÑ –õ–æ–≥–∏ —é–∑–µ—Ä–±–æ—Ç–∞ (Session ID: {self.manager.session_id})"
            )
        except Exception as e:
            await event.edit(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ª–æ–≥–æ–≤: {str(e)}")

    async def handle_info(self, event: Message):
        if not await self.is_owner(event):
            return
            
        me = await self.manager.client.get_me()
        uptime = datetime.now() - self.manager.start_time
        sys_info = self.get_system_info()
        
        info_msg = [
            f"ü§ñ <b>Acroka UserBot Info (Session ID: {self.manager.session_id})</b>",
            "",
            f"üë§ <b>–í–ª–∞–¥–µ–ª–µ—Ü:</b> <a href='tg://user?id={me.id}'>{me.first_name}</a>",
            f"üÜî <b>ID:</b> <code>{me.id}</code>",
            f"‚è± <b>–ê–ø—Ç–∞–π–º:</b> {str(timedelta(seconds=uptime.seconds)).split('.')[0]}",
            f"üì¶ <b>–ú–æ–¥—É–ª–µ–π:</b> {len(self.manager.modules)}",
            f"üîπ <b>–ü—Ä–µ—Ñ–∏–∫—Å:</b> <code>{self.manager.prefix}</code>",
            "",
            f"üîÑ <b>–í–µ—Ä—Å–∏—è:</b> <code>{self.manager.version}</code>",
            f"üìÖ <b>–û–±–Ω–æ–≤–ª–µ–Ω–æ:</b> <code>{self.manager.last_update_time}</code>",
            ""
        ]
        
        if sys_info:
            info_msg.extend([
                "‚öôÔ∏è <b>–°–∏—Å—Ç–µ–º–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:</b>",
                f"‚Ä¢ <b>–û–°:</b> {platform.system()} {platform.release()}",
                f"‚Ä¢ <b>Python:</b> {platform.python_version()}",
                f"‚Ä¢ <b>Telethon:</b> {telethon.__version__}",
                "",
                "üíæ <b>–ü–∞–º—è—Ç—å:</b>",
                f"‚Ä¢ <b>–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ:</b> {sys_info['memory']['used']} MB / {sys_info['memory']['total']} MB ({sys_info['memory']['percent']}%)",
                "",
                "üñ• <b>–ü—Ä–æ—Ü–µ—Å—Å–æ—Ä:</b>",
                f"‚Ä¢ <b>–Ø–¥–µ—Ä:</b> {sys_info['cpu']['cores']}",
                f"‚Ä¢ <b>–ù–∞–≥—Ä—É–∑–∫–∞:</b> {sys_info['cpu']['usage']}%",
                "",
                f"‚è≥ <b>–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã —Å–∏—Å—Ç–µ–º—ã:</b> {sys_info['uptime']}",
                ""
            ])
        
        info_msg.extend([
            f"üìÇ <b>–†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π:</b> <code>{self.repo_url}</code>",
            f"üìù <b>–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è:</b> <code>{self.docs_url}</code>"
        ])

        await event.edit("\n".join([line for line in info_msg if line]), parse_mode='html', link_preview=False)

    async def handle_reloadmod(self, event: Message):
        """–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥—É–ª—è"""
        if not await self.is_owner(event):
            return
            
        module_name = event.pattern_match.group(1)
        
        if not module_name:
            await event.edit("‚ùå –£–∫–∞–∂–∏—Ç–µ –∏–º—è –º–æ–¥—É–ª—è –¥–ª—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏")
            return
            
        try:
            if await self.manager.reload_module(module_name):
                await event.edit(f"‚úÖ –ú–æ–¥—É–ª—å <code>{module_name}</code> —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω!", parse_mode='html')
            else:
                await event.edit(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å –º–æ–¥—É–ª—å <code>{module_name}</code>", parse_mode='html')
        except Exception as e:
            await event.edit(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–µ –º–æ–¥—É–ª—è: {str(e)}")

    async def handle_ping(self, event: Message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã ping"""
        if not await self.is_owner(event):
            return
            
        start = datetime.now()
        msg = await event.edit("üèì Pong!")
        latency = (datetime.now() - start).microseconds / 1000
        await msg.edit(f"üèì Pong! | {latency}ms")

    async def handle_update(self, event: Message):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–æ—Ç–∞ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –ø–∞–ø–∫–∏ source"""
        if not await self.is_owner(event):
            return

        try:
            msg = await event.edit("üîÑ <b>–ù–∞—á–∞–ª–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è...</b>", parse_mode='html')

            # 1. –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –ø–∞–ø–∫—É –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            temp_dir = "temp_update"
            if os.path.exists(temp_dir):
                shutil.rmtree(temp_dir)
            os.makedirs(temp_dir)

            # 2. –ö–ª–æ–Ω–∏—Ä—É–µ–º —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—É—é –ø–∞–ø–∫—É
            await msg.edit("üîÑ <b>–ó–∞–≥—Ä—É–∑–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π...</b>", parse_mode='html')
            clone_cmd = f"git clone {self.repo_url} {temp_dir}"
            process = await asyncio.create_subprocess_shell(
                clone_cmd,
                stdout=asyncio.subprocess.PIPE,
                stderr=asyncio.subprocess.PIPE
            )
            await process.communicate()

            if process.returncode != 0:
                shutil.rmtree(temp_dir)
                return await msg.edit("‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π</b>", parse_mode='html')

            # 3. –ö–æ–ø–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –Ω—É–∂–Ω—ã–µ —Ñ–∞–π–ª—ã, –∏—Å–∫–ª—é—á–∞—è –ø–∞–ø–∫—É source
            await msg.edit("üîÑ <b>–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π...</b>", parse_mode='html')
            excluded = {'source', '.git', 'pycache', temp_dir}
            
            for item in os.listdir(temp_dir):
                if item not in excluded:
                    src_path = os.path.join(temp_dir, item)
                    dest_path = os.path.join('.', item)
                    
                    if os.path.exists(dest_path):
                        if os.path.isdir(dest_path):
                            shutil.rmtree(dest_path)
                        else:
                            os.remove(dest_path)
                    
                    if os.path.isdir(src_path):
                        shutil.copytree(src_path, dest_path)
                    else:
                        shutil.copy2(src_path, dest_path)

            # 4. –ü–æ–ª—É—á–∞–µ–º –≤–µ—Ä—Å–∏—é –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            version_file = os.path.join(temp_dir, 'version.txt')
            new_version = "unknown"
            if os.path.exists(version_file):
                with open(version_file, 'r') as f:
                    new_version = f.read().strip()

            # 5. –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
            shutil.rmtree(temp_dir)

            # 6. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
            await msg.edit("üîÑ <b>–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...</b>", parse_mode='html')
            if os.path.exists('requirements.txt'):
                process = await asyncio.create_subprocess_shell(
                    f"{sys.executable} -m pip install -r requirements.txt --upgrade",
                    stdout=asyncio.subprocess.PIPE,
                    stderr=asyncio.subprocess.PIPE
                )
                await process.communicate()

            await msg.edit(
                f"üéâ <b>–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!</b>\n\n"
                f"<b>–ù–æ–≤–∞—è –≤–µ—Ä—Å–∏—è:</b> <code>{new_version}</code>\n\n"
                "‚úÖ <b>–ü–∞–ø–∫–∞ source —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞</b>\n"
                "üîÑ <b>–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥...</b>",
                parse_mode='html'
            )

            await asyncio.sleep(5)
            await self.restart_bot()

        except Exception as e:
            error_msg = (
                f"‚ùå <b>–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è</b>\n\n"
                f"<code>{str(e)}</code>\n\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—Ä—É—á–Ω—É—é:\n"
                "1. –°–∫–∞—á–∞–π—Ç–µ –∞—Ä—Ö–∏–≤ —Å GitHub\n"
                "2. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ —Ñ–∞–π–ª—ã, –∫—Ä–æ–º–µ –ø–∞–ø–∫–∏ source\n"
                "3. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞"
            )
            await event.edit(error_msg, parse_mode='html')
            if os.path.exists(temp_dir):
                shutil.rmtree(temp_dir)
                
    
    async def handle_clean(self, event: Message):
        """–û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞ –∏ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤"""
        if not await self.is_owner(event):
            return
            
        try:
            msg = await event.edit("üßπ <b>–û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞...</b>", parse_mode='html')
            
            for root, _, files in os.walk('.'):
                for file in files:
                    if file.endswith(('.pyc', '.pyo')):
                        os.remove(os.path.join(root, file))
            
            for root, dirs, _ in os.walk('.'):
                if '__pycache__' in dirs:
                    shutil.rmtree(os.path.join(root, '__pycache__'))
            
            await msg.edit(
                "‚úÖ <b>–û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!</b>\n\n"
                "–í—Å–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –∏ –∫—ç—à —É–¥–∞–ª–µ–Ω—ã.",
                parse_mode='html'
            )
            
        except Exception as e:
            await event.edit(
                "‚ùå <b>–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏</b>\n\n"
                f"<code>{str(e)}</code>",
                parse_mode='html'
            )

    async def handle_loadmod(self, event: Message):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥—É–ª—è"""
        if not await self.is_owner(event):
            return
            
        if not event.is_reply:
            response = await event.edit("‚ùå –û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Ñ–∞–π–ª –º–æ–¥—É–ª—è (.py)")
            await asyncio.sleep(3)
            await response.delete()
            return
            
        reply = await event.get_reply_message()
        if not reply.file or not reply.file.name.endswith('.py'):
            response = await event.edit("‚ùå –§–∞–π–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å .py –º–æ–¥—É–ª–µ–º")
            await asyncio.sleep(3)
            await response.delete()
            return
            
        try:
            path = await reply.download_media(file=MODS_DIR)
            module_name = os.path.splitext(os.path.basename(path))[0]
            
            if await self.manager.load_module(module_name):
                module_data = self.manager.modules[module_name]
                module = module_data['module']
                
                desc = getattr(module, '__doc__', '–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è').strip()
                version = getattr(module, 'version', '1.0')
                commands = getattr(module, 'commands', {})
                
                desc = desc.replace("–û–ø–∏—Å–∞–Ω–∏–µ:", "").strip()
                
                formatted_commands = []
                if isinstance(commands, dict):
                    for cmd, cmd_desc in commands.items():
                        if cmd_desc:
                            formatted_commands.append(f"‚Ä¢ <code>{self.manager.prefix}{cmd}</code> - {cmd_desc}")
                        else:
                            formatted_commands.append(f"‚Ä¢ <code>{self.manager.prefix}{cmd}</code>")
                elif isinstance(commands, list):
                    formatted_commands = [f"‚Ä¢ <code>{self.manager.prefix}{cmd}</code>" for cmd in commands]
                
                info_msg = [
                    f"‚úÖ <b>–ú–æ–¥—É–ª—å {module_name} v{version} —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω!</b>",
                    "",
                    f"üìù <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {desc}",
                    ""
                ]
                
                if formatted_commands:
                    info_msg.extend([
                        "‚öôÔ∏è <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>",
                        *formatted_commands,
                        ""
                    ])
                
                await event.edit("\n".join(info_msg), parse_mode='html')
            else:
                await event.edit("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥—É–ª—è")
                
        except Exception as e:
            await event.edit(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
            if os.path.exists(path):
                os.remove(path)

    async def handle_searchmod(self, event: Message):
        if not await self.is_owner(event):
            return
            
        search_query = event.pattern_match.group(1)
        if not search_query:
            await event.edit("‚ùå –£–∫–∞–∂–∏—Ç–µ –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å")
            return
            
        try:
            await event.edit("üîç –ü–æ–∏—Å–∫ –º–æ–¥—É–ª–µ–π...")
            repo_url = "https://github.com/theLuni/AcrokaUB-Modules"
            finder = ModuleFinder(repo_url)
            found_modules = finder.search_modules(search_query)

            if not found_modules:
                await event.edit(f"üîç –ü–æ –∑–∞–ø—Ä–æ—Å—É '{search_query}' –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                return

            results = []
            for module_name, description in found_modules.items():
                results.append(
                    f"üì¶ <b>{module_name[:-3]}</b>\n"
                    f"üìù <i>{description[:100]}...</i>\n"
                    f"üîó <code>.dlm {module_name}</code>\n"
                )

            message = [
                f"üîç <b>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –ø–æ –∑–∞–ø—Ä–æ—Å—É '{search_query}':</b>",
                f"üìÇ <b>–†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π:</b> <code>{repo_url}</code>",
                "",
                *results,
                "",
                f"‚ÑπÔ∏è –ù–∞–π–¥–µ–Ω–æ –º–æ–¥—É–ª–µ–π: {len(found_modules)}",
                f"‚ÑπÔ∏è –î–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É <code>.dlm –∏–º—è_–º–æ–¥—É–ª—è.py</code>"
            ]
            
            await event.edit("\n".join(message), parse_mode='html')

        except Exception as e:
            await event.edit(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {str(e)}")    
            
    async def handle_downloadmod(self, event: Message):
        if not await self.is_owner(event):
            return
            
        module_file = event.pattern_match.group(1)
        if not module_file:
            await event.edit("‚ùå –£–∫–∞–∂–∏—Ç–µ –∏–º—è —Ñ–∞–π–ª–∞ –º–æ–¥—É–ª—è (–Ω–∞–ø—Ä–∏–º–µ—Ä: .dlm example.py)")
            return
            
        if not module_file.endswith('.py'):
            module_file += '.py'
            
        try:

            msg = await event.edit(f"‚¨áÔ∏è –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –º–æ–¥—É–ª—è {module_file}...")
            
            module_url = f"{RAW_MODS_URL}{module_file}"
            module_path = await self.manager.download_module(module_url)
            
            module_name = os.path.splitext(module_file)[0]
            if await self.manager.load_module(module_name):
                await msg.edit(
                    f"‚úÖ <b>–ú–æ–¥—É–ª—å {module_name} —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!</b>\n\n"
                    f"–§–∞–π–ª: <code>{module_file}</code>\n"
                    f"–ò—Å—Ç–æ—á–Ω–∏–∫: <code>{MODS_REPO}</code>\n\n"
                    f"–î–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–æ–¥—É–ª–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ <code>{self.manager.prefix}gm {module_name}</code>",
                    parse_mode='html'
                )
            else:
                await msg.edit(
                    "‚ö†Ô∏è <b>–ú–æ–¥—É–ª—å —Å–∫–∞—á–∞–Ω, –Ω–æ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω</b>\n\n"
                    f"–§–∞–π–ª: <code>{module_file}</code>\n"
                    f"–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–µ–π: <code>{self.manager.prefix}logs</code>",
                    parse_mode='html'
                )
                
        except ValueError as e:
            await event.edit(
                "‚ùå <b>–û—à–∏–±–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏</b>\n\n"
                f"{str(e)}\n\n"
                "–†–∞–∑—Ä–µ—à–µ–Ω—ã —Ç–æ–ª—å–∫–æ –º–æ–¥—É–ª–∏ –∏–∑ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–≥–æ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è: "
                f"<code>{MODS_REPO}</code>",
                parse_mode='html'
            )
        except Exception as e:
            await event.edit(
                "‚ùå <b>–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥—É–ª—è</b>\n\n"
                f"<code>{str(e)}</code>\n\n"
                "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ:\n"
                "1. –ü—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –∏–º–µ–Ω–∏ –º–æ–¥—É–ª—è\n"
                "2. –ù–∞–ª–∏—á–∏–µ –º–æ–¥—É–ª—è –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏\n"
                f"3. –î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è: <code>{MODS_REPO}</code>",
                parse_mode='html'
            )
            if os.path.exists(module_path):
                os.remove(module_path)

    async def handle_getmod(self, event: Message):
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª –º–æ–¥—É–ª—è –≤ —á–∞—Ç"""
        if not await self.is_owner(event):
            return
            
        module_name = event.pattern_match.group(1)
        
        if module_name not in self.manager.modules:
            await event.edit(
                "‚ùå <b>–ú–æ–¥—É–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω</b>\n\n"
                f"–ú–æ–¥—É–ª—å <code>{module_name}</code> –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω.",
                parse_mode='html'
            )
            return
            
        try:
            module_data = self.manager.modules[module_name]
            module = module_data['module']
            
            desc = getattr(module, '__doc__', '–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è').strip()
            version = getattr(module, 'version', '1.0')
            commands = getattr(module, 'commands', [])
            
            info_msg = [
                f"üì¶ <b>–ú–æ–¥—É–ª—å {module_name} v{version}</b>",
                f"üìù <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {desc}",
                "",
                "üõ† <b>–ö–æ–º–∞–Ω–¥—ã:</b>",
                *[f"‚Ä¢ <code>{self.manager.prefix}{cmd}</code>" for cmd in commands],
                "",
                "‚¨áÔ∏è <i>–§–∞–π–ª –º–æ–¥—É–ª—è:</i>"
            ]
            
            await event.delete()
            await self.manager.client.send_message(
                event.chat_id,
                "\n".join(info_msg),
                parse_mode='html',
                file=module_data['path']
            )
            
        except Exception as e:
            await event.edit(
                "‚ùå <b>–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–æ–¥—É–ª—è</b>\n\n"
                f"<code>{str(e)}</code>",
                parse_mode='html'
            )

    async def handle_unloadmod(self, event: Message):
        """–ü–æ–ª–Ω–æ—Å—Ç—å—é —É–¥–∞–ª–∏—Ç—å –º–æ–¥—É–ª—å"""
        if not await self.is_owner(event):
            return
            
        module_name = event.pattern_match.group(1)
        
        if module_name not in self.manager.modules:
            await event.edit(
                "‚ùå <b>–ú–æ–¥—É–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω</b>\n\n"
                f"–ú–æ–¥—É–ª—å <code>{module_name}</code> –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω.",
                parse_mode='html'
            )
            return
            
        try:
            module_path = self.manager.modules[module_name]['path']
            
            if await self.manager.unload_module(module_name):
                os.remove(module_path)
                await event.edit(
                    "‚úÖ <b>–ú–æ–¥—É–ª—å –ø–æ–ª–Ω–æ—Å—Ç—å—é —É–¥–∞–ª–µ–Ω</b>\n\n"
                    f"–ú–æ–¥—É–ª—å <code>{module_name}</code> –±—ã–ª:\n"
                    "1. –í—ã–≥—Ä—É–∂–µ–Ω –∏–∑ –ø–∞–º—è—Ç–∏\n"
                    "2. –û—á–∏—â–µ–Ω –∫—ç—à\n"
                    f"3. –§–∞–π–ª —É–¥–∞–ª–µ–Ω: <code>{os.path.basename(module_path)}</code>",
                    parse_mode='html'
                )
            else:
                await event.edit(
                    "‚ö†Ô∏è <b>–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–≥—Ä—É–∑–∏—Ç—å –º–æ–¥—É–ª—å</b>\n\n"
                    "–§–∞–π–ª –Ω–µ –±—ã–ª —É–¥–∞–ª–µ–Ω.",
                    parse_mode='html'
                )
                
        except Exception as e:
            await event.edit(
                "‚ùå <b>–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è</b>\n\n"
                f"<code>{str(e)}</code>",
                parse_mode='html'
            )

    async def handle_modlist(self, event: Message):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –º–æ–¥—É–ª–µ–π"""
        if not await self.is_owner(event):
            return
            
        if not self.manager.modules:
            await event.edit("‚ÑπÔ∏è –ù–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –º–æ–¥—É–ª–µ–π")
            return
            
        mod_list = [
            "üì¶ <b>–ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –º–æ–¥—É–ª–∏:</b>",
            f"üîπ –í—Å–µ–≥–æ: {len(self.manager.modules)}",
            ""
        ]
        
        for mod_name, mod_data in self.manager.modules.items():
            module = mod_data['module']
            desc = getattr(module, '__doc__', '–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è').split('\n')[0]
            version = getattr(module, 'version', '1.0')
            uptime = datetime.now() - mod_data['loaded_at']
            
            mod_list.append(
                f"‚Ä¢ <b>{mod_name}</b> (v{version})\n"
                f"  <i>{desc}</i>\n"
                f"  üïí –ó–∞–≥—Ä—É–∂–µ–Ω: {uptime.seconds // 3600}—á {(uptime.seconds % 3600) // 60}–º –Ω–∞–∑–∞–¥\n"
                f"  üìÇ <code>{os.path.basename(mod_data['path'])}</code>"
            )
        
        await event.edit("\n".join(mod_list), parse_mode='html')

    async def handle_translate(self, event: Message):
        """–ü–µ—Ä–µ–≤–æ–¥—á–∏–∫"""
        if not await self.is_owner(event):
            return
            
        if not event.is_reply:
            await event.edit("‚ùå –û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞")
            return
            
        target_lang = event.pattern_match.group(1)
        if not target_lang:
            await event.edit("‚ùå –£–∫–∞–∂–∏—Ç–µ —è–∑—ã–∫ –ø–µ—Ä–µ–≤–æ–¥–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: .tr en)")
            return
            
        reply = await event.get_reply_message()
        text = reply.text
        
        try:
            translator = Translator()
            translated = translator.translate(text, dest=target_lang)
            await event.edit(
                f"üåê –ü–µ—Ä–µ–≤–æ–¥ ({translated.src} ‚Üí {target_lang}):\n\n"
                f"{translated.text}"
            )
        except Exception as e:
            await event.edit(f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞: {str(e)}")

    async def handle_calc(self, event: Message):
        """–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä"""
        if not await self.is_owner(event):
            return
            
        expr = event.pattern_match.group(1)
        try:
            result = eval(expr)
            await event.edit(f"üßÆ –†–µ–∑—É–ª—å—Ç–∞—Ç: {result}")
        except Exception as e:
            await event.edit(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è: {str(e)}")

    async def restart_bot(self, event: Message = None):
        """–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ —é–∑–µ—Ä–±–æ—Ç–∞"""
        if event and not await self.is_owner(event):
            return
            
        if event:
            await event.edit("üîÑ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞...")
        
        await self.manager.save_loaded_modules()
        os.execl(sys.executable, sys.executable, *sys.argv)

    def register_handlers(self):
        prefix = re.escape(self.manager.prefix)
        
        cmd_handlers = [
            (rf'^{prefix}help$', self.handle_help),
            (rf'^{prefix}ping$', self.handle_ping),
            (rf'^{prefix}info$', self.handle_info),
            (rf'^{prefix}update$', self.handle_update),
            (rf'^{prefix}clean$', self.handle_clean),
            (rf'^{prefix}lm$', self.handle_loadmod),
            (rf'^{prefix}gm (\w+)$', self.handle_getmod),
            (rf'^{prefix}ulm (\w+)$', self.handle_unloadmod),
            (rf'^{prefix}rlm (\w+)$', self.handle_reloadmod),
            (rf'^{prefix}mlist$', self.handle_modlist),
            (rf'^{prefix}tr (\w+)$', self.handle_translate),
            (rf'^{prefix}calc (.+)$', self.handle_calc),
            (rf'^{prefix}restart$', self.restart_bot),
            (rf'^{prefix}logs$', self.handle_logs),
            (rf'^{prefix}searchmod (.+)$', self.handle_searchmod),
            (rf'^{prefix}dlm (\w+\.py)$', self.handle_downloadmod),
            (rf'^{prefix}dlm (\w+)$', self.handle_downloadmod),
        ]
        
        for pattern, handler in cmd_handlers:
            self.manager.client.add_event_handler(
                handler,
                events.NewMessage(pattern=pattern, outgoing=True)
            )

async def check_internet():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è."""
    try:
        # –í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—É ping –Ω–∞ Google DNS
        output = subprocess.check_output(['ping', '-c', '1', '8.8.8.8'], stderr=subprocess.DEVNULL)
        print("üåê [–ò–Ω—Ç–µ—Ä–Ω–µ—Ç] –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –Ω–æ—Ä–º–∞–ª—å–Ω–æ.")
    except subprocess.CalledProcessError:
        print("‚ö†Ô∏è [–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ] –ü—Ä–æ–±–ª–µ–º—ã —Å –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ–º. –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ–Ω–∞–¥–µ–∂–Ω—ã–º.")

async def main(client=None):
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ —é–∑–µ—Ä–±–æ—Ç–∞"""
    print("üü¢ [–°–∏—Å—Ç–µ–º–∞] –ó–∞–ø—É—Å–∫ Acroka UserBot...")
    
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞
        if client is None:
            client = TelegramClient(SESSION_FILE, API_ID, API_HASH)
            await client.start()
        
        print("‚úÖ [–°–∏—Å—Ç–µ–º–∞] –Æ–∑–µ—Ä–±–æ—Ç –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        await check_internet()

        # –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–µ—Ñ–∏–∫—Å–∞
        prefix = DEFAULT_PREFIX
        if os.path.exists(PREFIX_FILE):
            with open(PREFIX_FILE, 'r') as f:
                prefix = f.read().strip() or DEFAULT_PREFIX

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –º–æ–¥—É–ª–µ–π
        manager = ModuleManager(client)
        manager.prefix = prefix
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ—Å–Ω–æ–≤–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
        core_commands = CoreCommands(manager)
        await core_commands.initialize()
        core_commands.register_handlers()

        # –ó–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö –º–æ–¥—É–ª–µ–π
        await manager.load_all_modules()

        print(f"üü¢ [–°–∏—Å—Ç–µ–º–∞] –Æ–∑–µ—Ä–±–æ—Ç –∑–∞–ø—É—â–µ–Ω | –ü—Ä–µ—Ñ–∏–∫—Å: '{prefix}'")
        print("üîπ –û—Ç–ø—Ä–∞–≤—å—Ç–µ .help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥")
        
        # –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª
        await client.run_until_disconnected()
        
    except Exception as e:
        print(f"‚ùå [–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞] {str(e)}")
        traceback.print_exc()
    finally:
        if 'client' in locals() and client.is_connected():
            await client.disconnect()
            print("üî¥ [–°–∏—Å—Ç–µ–º–∞] –Æ–∑–µ—Ä–±–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

if __name__ == '__main__':
    asyncio.run(main())
