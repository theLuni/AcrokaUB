import os
import sys
import importlib
import asyncio
import re
import shutil
import traceback
import platform
import telethon
from datetime import datetime
from telethon import TelegramClient, events
from telethon.tl.types import Message
from config import API_ID, API_HASH
import requests
from googletrans import Translator

# ====================== –ö–û–ù–°–¢–ê–ù–¢–´ ======================
MODS_DIR = 'source/mods/'
PREFIX_FILE = 'source/prefix.txt'
DEFAULT_PREFIX = '.'
LOADED_MODS_FILE = '.loaded_mods'
SESSION_FILE = 'userbot_session'

# ====================== –ú–ï–ù–ï–î–ñ–ï–† –ú–û–î–£–õ–ï–ô ======================
class ModuleManager:
    def __init__(self, client):
        self.client = client
        self.modules = {}
        self.prefix = DEFAULT_PREFIX
        self.start_time = datetime.now()
        os.makedirs(MODS_DIR, exist_ok=True)

    async def load_module(self, module_name: str) -> bool:
        """–ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥—É–ª—è —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
        try:
            self._clean_cache(module_name)
            module_path = os.path.join(MODS_DIR, f"{module_name}.py")
            
            spec = importlib.util.spec_from_file_location(
                f"userbot.mods.{module_name}", 
                module_path
            )
            module = importlib.util.module_from_spec(spec)
            sys.modules[f"userbot.mods.{module_name}"] = module
            spec.loader.exec_module(module)
            
            handlers = []
            if hasattr(module, 'on_load'):
                handlers = await module.on_load(self.client, self.prefix) or []
            
            self.modules[module_name] = {
                'module': module,
                'path': module_path,
                'handlers': handlers,
                'loaded_at': datetime.now()
            }
            
            print(f"‚úÖ [–ú–æ–¥—É–ª—å] {module_name} —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω")
            return True
            
        except Exception as e:
            print(f"‚ùå [–û—à–∏–±–∫–∞] –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –º–æ–¥—É–ª—å {module_name}:")
            traceback.print_exc()
            return False

    async def unload_module(self, module_name: str) -> bool:
        """–í—ã–≥—Ä—É–∑–∫–∞ –º–æ–¥—É–ª—è —Å –æ—á–∏—Å—Ç–∫–æ–π"""
        if module_name not in self.modules:
            return False
            
        module_data = self.modules[module_name]
        
        try:
            if hasattr(module_data['module'], 'on_unload'):
                await module_data['module'].on_unload()
            
            for handler in module_data['handlers']:
                self.client.remove_event_handler(handler)
            
            del sys.modules[f"userbot.mods.{module_name}"]
            del self.modules[module_name]
            
            print(f"‚úÖ [–ú–æ–¥—É–ª—å] {module_name} –≤—ã–≥—Ä—É–∂–µ–Ω")
            return True
            
        except Exception as e:
            print(f"‚ùå [–û—à–∏–±–∫–∞] –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–≥—Ä—É–∑–∏—Ç—å –º–æ–¥—É–ª—å {module_name}:")
            traceback.print_exc()
            return False

    def _clean_cache(self, module_name: str):
        """–û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞ –º–æ–¥—É–ª—è"""
        cache_dir = os.path.join(MODS_DIR, '__pycache__')
        if os.path.exists(cache_dir):
            shutil.rmtree(cache_dir)
        
        pyc_file = os.path.join(MODS_DIR, f"{module_name}.pyc")
        if os.path.exists(pyc_file):
            os.remove(pyc_file)

    async def load_all_modules(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö –º–æ–¥—É–ª–µ–π –∏–∑ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏"""
        print(f"üîç [–°–∏—Å—Ç–µ–º–∞] –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥—É–ª–µ–π...")
        
        if not os.path.exists(LOADED_MODS_FILE):
            for filename in os.listdir(MODS_DIR):
                if filename.endswith('.py') and not filename.startswith('_'):
                    await self.load_module(filename[:-3])
        else:
            with open(LOADED_MODS_FILE, 'r') as f:
                for module_name in f.read().splitlines():
                    if module_name:
                        await self.load_module(module_name)
            os.remove(LOADED_MODS_FILE)
        
        print(f"üì¶ [–°–∏—Å—Ç–µ–º–∞] –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(self.modules)} –º–æ–¥—É–ª–µ–π")

    async def save_loaded_modules(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –º–æ–¥—É–ª–µ–π"""
        with open(LOADED_MODS_FILE, 'w') as f:
            f.write('\n'.join(self.modules.keys()))

# ====================== –û–°–ù–û–í–ù–´–ï –ö–û–ú–ê–ù–î–´ ======================
class CoreCommands:
    def __init__(self, manager):
        self.manager = manager
        self.owner_id = None
    
    async def initialize(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤–ª–∞–¥–µ–ª—å—Ü–∞"""
        me = await self.manager.client.get_me()
        self.owner_id = me.id
        print(f"üîê [–°–∏—Å—Ç–µ–º–∞] –í–ª–∞–¥–µ–ª–µ—Ü ID: {self.owner_id}")

    async def is_owner(self, event: Message) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –≤–ª–∞–¥–µ–ª—å—Ü–∞"""
        if event.sender_id == self.owner_id:
            return True
        try:
            await event.delete()
        except:
            pass
        return False

    async def handle_help(self, event: Message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –ø–æ–º–æ—â–∏"""
        if not await self.is_owner(event):
            return
            
        prefix = self.manager.prefix
        commands = [
            f"{prefix}help - –°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥",
            f"{prefix}ping - –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏",
            f"{prefix}info - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —é–∑–µ—Ä–±–æ—Ç–µ",
            f"{prefix}loadmod - –ó–∞–≥—Ä—É–∑–∏—Ç—å –º–æ–¥—É–ª—å (–æ—Ç–≤–µ—Ç –Ω–∞ —Ñ–∞–π–ª)",
            f"{prefix}unloadmod <–∏–º—è> - –í—ã–≥—Ä—É–∑–∏—Ç—å –º–æ–¥—É–ª—å",
            f"{prefix}restart - –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —é–∑–µ—Ä–±–æ—Ç–∞",
            f"{prefix}tr <—è–∑—ã–∫> - –ü–µ—Ä–µ–≤–æ–¥—á–∏–∫",
            f"{prefix}calc <–≤—ã—Ä–∞–∂–µ–Ω–∏–µ> - –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä"
        ]
        
        await event.edit(
            "‚ú® <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n" + 
            "\n".join(f"‚Ä¢ {cmd}" for cmd in commands),
            parse_mode='html'
        )

    async def handle_ping(self, event: Message):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∏–Ω–≥–∞"""
        if not await self.is_owner(event):
            return
            
        start = datetime.now()
        msg = await event.edit("üèì Pong!")
        latency = (datetime.now() - start).microseconds / 1000
        await msg.edit(f"üèì Pong! | {latency}ms")

    async def handle_info(self, event: Message):
        """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —é–∑–µ—Ä–±–æ—Ç–µ"""
        if not await self.is_owner(event):
            return
            
        me = await self.manager.client.get_me()
        uptime = datetime.now() - self.manager.start_time
        
        await event.edit(
            f"ü§ñ <b>UserBot Info</b>\n\n"
            f"üë§ <b>–í–ª–∞–¥–µ–ª–µ—Ü:</b> {me.first_name}\n"
            f"üÜî <b>ID:</b> {me.id}\n"
            f"‚è± <b>–ê–ø—Ç–∞–π–º:</b> {str(uptime).split('.')[0]}\n"
            f"‚öôÔ∏è <b>–í–µ—Ä—Å–∏—è Telethon:</b> {telethon.__version__}\n"
            f"üì¶ <b>–ú–æ–¥—É–ª–µ–π:</b> {len(self.manager.modules)}",
            parse_mode='html'
        )

    async def handle_loadmod(self, event: Message):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥—É–ª—è"""
        if not await self.is_owner(event):
            return
            
        if not event.is_reply:
            response = await event.edit("‚ùå –û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Ñ–∞–π–ª –º–æ–¥—É–ª—è (.py)")
            await asyncio.sleep(3)
            await response.delete()
            return
            
        reply = await event.get_reply_message()
        if not reply.file or not reply.file.name.endswith('.py'):
            response = await event.edit("‚ùå –§–∞–π–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å .py –º–æ–¥—É–ª–µ–º")
            await asyncio.sleep(3)
            await response.delete()
            return
            
        try:
            path = await reply.download_media(file=MODS_DIR)
            module_name = os.path.splitext(os.path.basename(path))[0]
            
            if await self.manager.load_module(module_name):
                await event.edit(f"‚úÖ –ú–æ–¥—É–ª—å {module_name} –∑–∞–≥—Ä—É–∂–µ–Ω!")
            else:
                await event.edit(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥—É–ª—è")
                
        except Exception as e:
            await event.edit(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
            if os.path.exists(path):
                os.remove(path)

    async def handle_unloadmod(self, event: Message):
        """–í—ã–≥—Ä—É–∑–∫–∞ –º–æ–¥—É–ª—è"""
        if not await self.is_owner(event):
            return
            
        module_name = event.pattern_match.group(1)
        if module_name not in self.manager.modules:
            await event.edit(f"‚ùå –ú–æ–¥—É–ª—å {module_name} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
            
        if await self.manager.unload_module(module_name):
            await event.edit(f"‚úÖ –ú–æ–¥—É–ª—å {module_name} –≤—ã–≥—Ä—É–∂–µ–Ω")
        else:
            await event.edit(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–≥—Ä—É–∑–∫–∏ –º–æ–¥—É–ª—è")

    async def handle_translate(self, event: Message):
        """–ü–µ—Ä–µ–≤–æ–¥—á–∏–∫"""
        if not await self.is_owner(event):
            return
            
        if not event.is_reply:
            await event.edit("‚ùå –û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞")
            return
            
        target_lang = event.pattern_match.group(1)
        if not target_lang:
            await event.edit("‚ùå –£–∫–∞–∂–∏—Ç–µ —è–∑—ã–∫ –ø–µ—Ä–µ–≤–æ–¥–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: .tr en)")
            return
            
        reply = await event.get_reply_message()
        text = reply.text
        
        try:
            translator = Translator()
            translated = translator.translate(text, dest=target_lang)
            await event.edit(
                f"üåê –ü–µ—Ä–µ–≤–æ–¥ ({translated.src} ‚Üí {target_lang}):\n\n"
                f"{translated.text}"
            )
        except Exception as e:
            await event.edit(f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞: {str(e)}")

    async def handle_calc(self, event: Message):
        """–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä"""
        if not await self.is_owner(event):
            return
            
        expr = event.pattern_match.group(1)
        try:
            result = eval(expr)
            await event.edit(f"üßÆ –†–µ–∑—É–ª—å—Ç–∞—Ç: {result}")
        except Exception as e:
            await event.edit(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è: {str(e)}")

    async def restart_bot(self, event: Message = None):
        """–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ —é–∑–µ—Ä–±–æ—Ç–∞"""
        if event and not await self.is_owner(event):
            return
            
        if event:
            await event.edit("üîÑ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞...")
        
        await self.manager.save_loaded_modules()
        os.execl(sys.executable, sys.executable, *sys.argv)

    def register_handlers(self):
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥"""
        prefix = re.escape(self.manager.prefix)
        
        cmd_handlers = [
            (rf'^{prefix}help$', self.handle_help),
            (rf'^{prefix}ping$', self.handle_ping),
            (rf'^{prefix}info$', self.handle_info),
            (rf'^{prefix}loadmod$', self.handle_loadmod),
            (rf'^{prefix}unloadmod (\w+)$', self.handle_unloadmod),
            (rf'^{prefix}tr (\w+)$', self.handle_translate),
            (rf'^{prefix}calc (.+)$', self.handle_calc),
            (rf'^{prefix}restart$', self.restart_bot),
        ]
        
        for pattern, handler in cmd_handlers:
            self.manager.client.add_event_handler(
                handler,
                events.NewMessage(pattern=pattern, outgoing=True)
            )

# ====================== –ó–ê–ü–£–°–ö –Æ–ó–ï–†–ë–û–¢–ê ======================
async def main(client=None):
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞
    if client is None:
        client = TelegramClient(SESSION_FILE, API_ID, API_HASH)
        try:
            await client.start()
            print("‚úÖ [–°–∏—Å—Ç–µ–º–∞] –Æ–∑–µ—Ä–±–æ—Ç –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω")
        except Exception as e:
            print(f"‚ùå [–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏] {str(e)}")
            return
    
    try:
        # –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–µ—Ñ–∏–∫—Å–∞
        prefix = DEFAULT_PREFIX
        if os.path.exists(PREFIX_FILE):
            with open(PREFIX_FILE, 'r') as f:
                prefix = f.read().strip() or DEFAULT_PREFIX

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –º–æ–¥—É–ª–µ–π
        manager = ModuleManager(client)
        manager.prefix = prefix
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥
        core_commands = CoreCommands(manager)
        await core_commands.initialize()
        core_commands.register_handlers()

        # –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥—É–ª–µ–π
        await manager.load_all_modules()

        print(f"üü¢ [–°–∏—Å—Ç–µ–º–∞] –Æ–∑–µ—Ä–±–æ—Ç –∑–∞–ø—É—â–µ–Ω | –ü—Ä–µ—Ñ–∏–∫—Å: '{prefix}'")
        print("üîπ –û—Ç–ø—Ä–∞–≤—å—Ç–µ .help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥")
        
        await client.run_until_disconnected()
        
    except Exception as e:
        print(f"‚ùå [–û—à–∏–±–∫–∞] {str(e)}")
        traceback.print_exc()
    finally:
        if client.is_connected():
            await client.disconnect()

if __name__ == '__main__':
    asyncio.run(main())
