import os
import sys
import importlib
import asyncio
import re
import shutil
import traceback
import platform
import telethon
import psutil
import socket
import uuid
from datetime import datetime, timedelta
from telethon import TelegramClient, events
from telethon.tl.types import Message
from config import API_ID, API_HASH
import requests
from googletrans import Translator

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
MODS_DIR = 'source/mods/'
PREFIX_FILE = 'source/prefix.txt'
DEFAULT_PREFIX = '.'
LOADED_MODS_FILE = '.loaded_mods'
SESSION_FILE = 'userbot_session'
GITHUB_REPO = "https://github.com/theLuni/AcrokaUB"
BACKUP_DIR = 'source/backups/'
LOG_FILE = 'userbot.log'

class ModuleManager:
    def __init__(self, client):
        self.client = client
        self.modules = {}
        self.prefix = DEFAULT_PREFIX
        self.start_time = datetime.now()
        self.session_id = str(uuid.uuid4())[:8]  # –£–Ω–∏–∫–∞–ª—å–Ω—ã–π ID —Å–µ—Å—Å–∏–∏
        os.makedirs(MODS_DIR, exist_ok=True)
        os.makedirs(BACKUP_DIR, exist_ok=True)
        self._setup_logging()

    def _setup_logging(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
        import logging
        logging.basicConfig(
            filename=LOG_FILE,
            level=logging.INFO,
            format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
        )
        self.logger = logging.getLogger('AcrokaUB')

    async def _backup_module(self, module_path: str):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ –º–æ–¥—É–ª—è"""
        if not os.path.exists(module_path):
            return
            
        backup_dir = os.path.join(BACKUP_DIR, datetime.now().strftime('%Y-%m-%d'))
        os.makedirs(backup_dir, exist_ok=True)
        
        backup_path = os.path.join(backup_dir, os.path.basename(module_path))
        shutil.copy2(module_path, backup_path)
        self.logger.info(f"Created backup of {module_path} at {backup_path}")

    async def load_module(self, module_name: str) -> bool:
        try:
            self._clean_cache(module_name)
            module_path = os.path.join(MODS_DIR, f"{module_name}.py")
            
            # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –ø–µ—Ä–µ–¥ –∑–∞–≥—Ä—É–∑–∫–æ–π
            await self._backup_module(module_path)
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –ø–µ—Ä–µ–¥ –∑–∞–≥—Ä—É–∑–∫–æ–π
            if not await self._check_dependencies(module_path):
                return False
                
            spec = importlib.util.spec_from_file_location(
                f"userbot.mods.{module_name}", 
                module_path
            )
            module = importlib.util.module_from_spec(spec)
            sys.modules[f"userbot.mods.{module_name}"] = module
            spec.loader.exec_module(module)
            
            handlers = []
            if hasattr(module, 'on_load'):
                handlers = await module.on_load(self.client, self.prefix) or []
            
            self.modules[module_name] = {
                'module': module,
                'path': module_path,
                'handlers': handlers,
                'loaded_at': datetime.now(),
                'load_count': 1
            }
            
            print(f"‚úÖ [–ú–æ–¥—É–ª—å] {module_name} —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω")
            self.logger.info(f"Module {module_name} loaded successfully")
            return True
            
        except Exception as e:
            error_msg = f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –º–æ–¥—É–ª—å {module_name}: {str(e)}"
            print(f"‚ùå [–û—à–∏–±–∫–∞] {error_msg}")
            self.logger.error(error_msg, exc_info=True)
            if os.path.exists(module_path):
                os.remove(module_path)
            return False

    async def _check_dependencies(self, module_path: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –º–æ–¥—É–ª—è"""
        try:
            with open(module_path, 'r', encoding='utf-8') as f:
                content = f.read()
            
            requires = re.search(r'#\s*requires?:\s*(.+)', content)
            if not requires:
                return True
                
            dependencies = [dep.strip() for dep in requires.group(1).split(',')]
            print(f"üîç [–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏] –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –¥–ª—è –º–æ–¥—É–ª—è: {', '.join(dependencies)}")
            self.logger.info(f"Installing dependencies: {', '.join(dependencies)}")
            
            process = await asyncio.create_subprocess_shell(
                f"{sys.executable} -m pip install --upgrade {' '.join(dependencies)}",
                stdout=asyncio.subprocess.PIPE,
                stderr=asyncio.subprocess.PIPE
            )
            
            stdout, stderr = await process.communicate()
            
            if process.returncode != 0:
                error_msg = f"–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏:\n{stderr.decode()}"
                print(f"‚ùå [–û—à–∏–±–∫–∞] {error_msg}")
                self.logger.error(error_msg)
                return False
                
            print(f"‚úÖ [–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏] –£—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã: {', '.join(dependencies)}")
            self.logger.info(f"Dependencies installed: {', '.join(dependencies)}")
            return True
            
        except Exception as e:
            error_msg = f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π: {str(e)}"
            print(f"‚ùå [–û—à–∏–±–∫–∞] {error_msg}")
            self.logger.error(error_msg, exc_info=True)
            return False

    async def reload_module(self, module_name: str) -> bool:
        """–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥—É–ª—è"""
        if module_name not in self.modules:
            return await self.load_module(module_name)
            
        if not await self.unload_module(module_name):
            return False
            
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ –∑–∞–≥—Ä—É–∑–æ–∫
        if await self.load_module(module_name):
            self.modules[module_name]['load_count'] += 1
            return True
        return False

    async def unload_module(self, module_name: str) -> bool:
        if module_name not in self.modules:
            return False
            
        module_data = self.modules[module_name]
        
        try:
            if hasattr(module_data['module'], 'on_unload'):
                await module_data['module'].on_unload()
            
            for handler in module_data['handlers']:
                self.client.remove_event_handler(handler)
            
            del sys.modules[f"userbot.mods.{module_name}"]
            del self.modules[module_name]
            
            # –ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞
            self._clean_cache(module_name)
            
            print(f"‚úÖ [–ú–æ–¥—É–ª—å] {module_name} –≤—ã–≥—Ä—É–∂–µ–Ω")
            self.logger.info(f"Module {module_name} unloaded")
            return True
            
        except Exception as e:
            error_msg = f"–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–≥—Ä—É–∑–∏—Ç—å –º–æ–¥—É–ª—å {module_name}: {str(e)}"
            print(f"‚ùå [–û—à–∏–±–∫–∞] {error_msg}")
            self.logger.error(error_msg, exc_info=True)
            return False

    def _clean_cache(self, module_name: str):
        """–ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞ –º–æ–¥—É–ª—è"""
        cache_dir = os.path.join(MODS_DIR, '__pycache__')
        if os.path.exists(cache_dir):
            shutil.rmtree(cache_dir)
        
        # –£–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö .pyc —Ñ–∞–π–ª–æ–≤ –¥–ª—è —ç—Ç–æ–≥–æ –º–æ–¥—É–ª—è
        for root, _, files in os.walk(MODS_DIR):
            for file in files:
                if file.startswith(module_name) and file.endswith('.pyc'):
                    os.remove(os.path.join(root, file))

    async def load_all_modules(self):
        print(f"üîç [–°–∏—Å—Ç–µ–º–∞] –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥—É–ª–µ–π...")
        
        if not os.path.exists(LOADED_MODS_FILE):
            for filename in os.listdir(MODS_DIR):
                if filename.endswith('.py') and not filename.startswith('_'):
                    await self.load_module(filename[:-3])
        else:
            with open(LOADED_MODS_FILE, 'r') as f:
                for module_name in f.read().splitlines():
                    if module_name:
                        await self.load_module(module_name)
            os.remove(LOADED_MODS_FILE)
        
        print(f"üì¶ [–°–∏—Å—Ç–µ–º–∞] –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(self.modules)} –º–æ–¥—É–ª–µ–π")

    async def save_loaded_modules(self):
        with open(LOADED_MODS_FILE, 'w') as f:
            f.write('\n'.join(self.modules.keys()))

class CoreCommands:
    def __init__(self, manager):
        self.manager = manager
        self.owner_id = None
        self.repo_url = GITHUB_REPO
        self.host_info = self._get_host_info()
    
    def _get_host_info(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ö–æ—Å—Ç–µ"""
        try:
            return {
                'hostname': socket.gethostname(),
                'ip': socket.gethostbyname(socket.gethostname()),
                'platform': platform.platform()
            }
        except:
            return None

    async def initialize(self):
        me = await self.manager.client.get_me()
        self.owner_id = me.id
        print(f"üîê [–°–∏—Å—Ç–µ–º–∞] –í–ª–∞–¥–µ–ª–µ—Ü ID: {self.owner_id}")
        self.manager.logger.info(f"Bot started for user ID: {self.owner_id}")

    async def is_owner(self, event: Message) -> bool:
        if event.sender_id == self.owner_id:
            return True
        try:
            await event.delete()
        except:
            pass
        return False

    def get_system_info(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–∏—Å—Ç–µ–º–µ"""
        try:
            mem = psutil.virtual_memory()
            disk = psutil.disk_usage('/')
            boot_time = datetime.fromtimestamp(psutil.boot_time())
            
            return {
                'memory': {
                    'total': round(mem.total / 1024 / 1024, 2),
                    'used': round(mem.used / 1024 / 1024, 2),
                    'free': round(mem.free / 1024 / 1024, 2),
                    'percent': mem.percent
                },
                'disk': {
                    'total': round(disk.total / 1024 / 1024),
                    'used': round(disk.used / 1024 / 1024),
                    'free': round(disk.free / 1024 / 1024),
                    'percent': disk.percent
                },
                'cpu': {
                    'cores': psutil.cpu_count(),
                    'usage': psutil.cpu_percent(),
                    'freq': psutil.cpu_freq().current if hasattr(psutil.cpu_freq(), 'current') else "N/A"
                },
                'boot_time': boot_time.strftime('%Y-%m-%d %H:%M:%S'),
                'uptime': str(datetime.now() - boot_time).split('.')[0]
            }
        except Exception as e:
            self.manager.logger.error(f"Error getting system info: {str(e)}")
            return None

    async def handle_help(self, event: Message):
        if not await self.is_owner(event):
            return
            
        prefix = self.manager.prefix
        
        help_msg = [
            f"‚ú® <b>Acroka UserBot Help (Session ID: {self.manager.session_id})</b> ‚ú®",
            "",
            "‚öôÔ∏è <b>–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>",
            f"‚Ä¢ <code>{prefix}help</code> - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ",
            f"‚Ä¢ <code>{prefix}ping</code> - –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∏–Ω–≥–∞",
            f"‚Ä¢ <code>{prefix}info</code> - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ",
            f"‚Ä¢ <code>{prefix}update</code> - –û–±–Ω–æ–≤–∏—Ç—å –±–æ—Ç–∞",
            f"‚Ä¢ <code>{prefix}restart</code> - –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞",
            "",
            "üì¶ <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–æ–¥—É–ª—è–º–∏:</b>",
            f"‚Ä¢ <code>{prefix}loadmod</code> - –ó–∞–≥—Ä—É–∑–∏—Ç—å –º–æ–¥—É–ª—å",
            f"‚Ä¢ <code>{prefix}getmod [name]</code> - –ü–æ–ª—É—á–∏—Ç—å –º–æ–¥—É–ª—å",
            f"‚Ä¢ <code>{prefix}unloadmod [name]</code> - –£–¥–∞–ª–∏—Ç—å –º–æ–¥—É–ª—å",
            f"‚Ä¢ <code>{prefix}reloadmod [name]</code> - –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å –º–æ–¥—É–ª—å",
            f"‚Ä¢ <code>{prefix}modlist</code> - –°–ø–∏—Å–æ–∫ –º–æ–¥—É–ª–µ–π",
            "",
            "üõ†Ô∏è <b>–£—Ç–∏–ª–∏—Ç—ã:</b>",
            f"‚Ä¢ <code>{prefix}tr [lang]</code> - –ü–µ—Ä–µ–≤–æ–¥—á–∏–∫",
            f"‚Ä¢ <code>{prefix}calc [expr]</code> - –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä",
            f"‚Ä¢ <code>{prefix}clean</code> - –û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞",
            f"‚Ä¢ <code>{prefix}logs</code> - –ü–æ–ª—É—á–∏—Ç—å –ª–æ–≥–∏"
        ]
        
        if self.manager.modules:
            help_msg.extend(["", "üîå <b>–ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –º–æ–¥—É–ª–∏:</b>"])
            for mod_name in self.manager.modules.keys():
                help_msg.append(f"‚Ä¢ <code>{mod_name}</code>")

        await event.edit("\n".join(help_msg), parse_mode='html')

    async def handle_logs(self, event: Message):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –ª–æ–≥–æ–≤"""
        if not await self.is_owner(event):
            return
            
        try:
            if not os.path.exists(LOG_FILE):
                await event.edit("‚ÑπÔ∏è –§–∞–π–ª –ª–æ–≥–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return
                
            await event.delete()
            await self.manager.client.send_file(
                event.chat_id,
                LOG_FILE,
                caption=f"üìÑ –õ–æ–≥–∏ —é–∑–µ—Ä–±–æ—Ç–∞ (Session ID: {self.manager.session_id})"
            )
        except Exception as e:
            await event.edit(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ª–æ–≥–æ–≤: {str(e)}")

    async def handle_info(self, event: Message):
        if not await self.is_owner(event):
            return
            
        me = await self.manager.client.get_me()
        uptime = datetime.now() - self.manager.start_time
        sys_info = self.get_system_info()
        
        # –ë–∞–∑–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        info_msg = [
            f"ü§ñ <b>Acroka UserBot Info (Session ID: {self.manager.session_id})</b>",
            "",
            f"üë§ <b>–í–ª–∞–¥–µ–ª–µ—Ü:</b> <a href='tg://user?id={me.id}'>{me.first_name}</a>",
            f"üÜî <b>ID:</b> <code>{me.id}</code>",
            f"‚è± <b>–ê–ø—Ç–∞–π–º:</b> {str(timedelta(seconds=uptime.seconds)).split('.')[0]}",
            f"üì¶ <b>–ú–æ–¥—É–ª–µ–π:</b> {len(self.manager.modules)}",
            f"üîπ <b>–ü—Ä–µ—Ñ–∏–∫—Å:</b> <code>{self.manager.prefix}</code>",
            ""
        ]
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ
        if sys_info:
            info_msg.extend([
                "‚öôÔ∏è <b>–°–∏—Å—Ç–µ–º–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:</b>",
                f"‚Ä¢ <b>–û–°:</b> {platform.system()} {platform.release()}",
                f"‚Ä¢ <b>Python:</b> {platform.python_version()}",
                f"‚Ä¢ <b>Telethon:</b> {telethon.__version__}",
                "",
                "üíæ <b>–ü–∞–º—è—Ç—å:</b>",
                f"‚Ä¢ <b>–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ:</b> {sys_info['memory']['used']} MB / {sys_info['memory']['total']} MB ({sys_info['memory']['percent']}%)",
                "",
                "üñ• <b>–ü—Ä–æ—Ü–µ—Å—Å–æ—Ä:</b>",
                f"‚Ä¢ <b>–Ø–¥–µ—Ä:</b> {sys_info['cpu']['cores']}",
                f"‚Ä¢ <b>–ù–∞–≥—Ä—É–∑–∫–∞:</b> {sys_info['cpu']['usage']}%",
                f"‚Ä¢ <b>–ß–∞—Å—Ç–æ—Ç–∞:</b> {sys_info['cpu']['freq']} MHz" if isinstance(sys_info['cpu']['freq'], (int, float)) else "",
                "",
                "üíΩ <b>–î–∏—Å–∫:</b>",
                f"‚Ä¢ <b>–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ:</b> {sys_info['disk']['used']} MB / {sys_info['disk']['total']} MB ({sys_info['disk']['percent']}%)",
                "",
                f"‚è≥ <b>–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã —Å–∏—Å—Ç–µ–º—ã:</b> {sys_info['uptime']}",
                f"üîå <b>–ü–æ—Å–ª–µ–¥–Ω—è—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞:</b> {sys_info['boot_time']}",
                ""
            ])
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ö–æ—Å—Ç–µ
        if self.host_info:
            info_msg.extend([
                "üñ• <b>–•–æ—Å—Ç:</b>",
                f"‚Ä¢ <b>–ò–º—è:</b> {self.host_info['hostname']}",
                f"‚Ä¢ <b>IP:</b> {self.host_info['ip']}",
                f"‚Ä¢ <b>–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞:</b> {self.host_info['platform']}",
                ""
            ])
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–æ–¥—É–ª—è—Ö
        if self.manager.modules:
            info_msg.append("üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–æ–¥—É–ª–µ–π:</b>")
            for mod_name, mod_data in self.manager.modules.items():
                uptime = datetime.now() - mod_data['loaded_at']
                info_msg.append(
                    f"‚Ä¢ <b>{mod_name}</b> - –∑–∞–≥—Ä—É–∂–µ–Ω {uptime.seconds // 3600}—á {(uptime.seconds % 3600) // 60}–º –Ω–∞–∑–∞–¥ "
                    f"(–∑–∞–≥—Ä—É–∑–æ–∫: {mod_data.get('load_count', 1)})"
                )
            info_msg.append("")
        
        info_msg.append(f"üîó <b>–†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π:</b> <code>{self.repo_url}</code>")

        await event.edit("\n".join([line for line in info_msg if line]), parse_mode='html', link_preview=False)

    async def handle_reloadmod(self, event: Message):
        """–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥—É–ª—è"""
        if not await self.is_owner(event):
            return
            
        module_name = event.pattern_match.group(1)
        
        if not module_name:
            await event.edit("‚ùå –£–∫–∞–∂–∏—Ç–µ –∏–º—è –º–æ–¥—É–ª—è –¥–ª—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏")
            return
            
        try:
            if await self.manager.reload_module(module_name):
                await event.edit(f"‚úÖ –ú–æ–¥—É–ª—å <code>{module_name}</code> —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω!", parse_mode='html')
            else:
                await event.edit(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å –º–æ–¥—É–ª—å <code>{module_name}</code>", parse_mode='html')
        except Exception as e:
            await event.edit(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–µ –º–æ–¥—É–ª—è: {str(e)}")

    async def handle_ping(self, event: Message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã ping"""
        if not await self.is_owner(event):
            return
            
        start = datetime.now()
        msg = await event.edit("üèì Pong!")
        latency = (datetime.now() - start).microseconds / 1000
        await msg.edit(f"üèì Pong! | {latency}ms")

    async def handle_update(self, event: Message):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–æ—Ç–∞ –∏–∑ GitHub"""
        if not await self.is_owner(event):
            return
            
        try:
            msg = await event.edit("üîÑ <b>–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π...</b>", parse_mode='html')
            
            if not os.path.exists('.git'):
                return await msg.edit("‚ùå –≠—Ç–æ –Ω–µ git-—Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π!", parse_mode='html')
            
            process = await asyncio.create_subprocess_shell(
                'git describe --tags',
                stdout=asyncio.subprocess.PIPE,
                stderr=asyncio.subprocess.PIPE
            )
            stdout, _ = await process.communicate()
            current_version = stdout.decode().strip()
            
            await msg.edit(
                f"üîç <b>–¢–µ–∫—É—â–∞—è –≤–µ—Ä—Å–∏—è:</b> <code>{current_version}</code>\n"
                "üîÑ <b>–ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è...</b>",
                parse_mode='html'
            )
            
            commands = [
                'git fetch --all',
                'git reset --hard origin/main',
                'git pull origin main'
            ]
            
            for cmd in commands:
                process = await asyncio.create_subprocess_shell(
                    cmd,
                    stdout=asyncio.subprocess.PIPE,
                    stderr=asyncio.subprocess.PIPE
                )
                await process.communicate()
            
            process = await asyncio.create_subprocess_shell(
                'git describe --tags',
                stdout=asyncio.subprocess.PIPE,
                stderr=asyncio.subprocess.PIPE
            )
            stdout, _ = await process.communicate()
            new_version = stdout.decode().strip()
            
            if current_version == new_version:
                return await msg.edit(
                    "‚úÖ <b>–£ –≤–∞—Å —É–∂–µ –ø–æ—Å–ª–µ–¥–Ω—è—è –≤–µ—Ä—Å–∏—è!</b>\n"
                    f"<b>–í–µ—Ä—Å–∏—è:</b> <code>{current_version}</code>",
                    parse_mode='html'
                )
            
            await msg.edit(
                f"üéâ <b>–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!</b>\n\n"
                f"<b>–ë—ã–ª–æ:</b> <code>{current_version}</code>\n"
                f"<b>–°—Ç–∞–ª–æ:</b> <code>{new_version}</code>\n\n"
                "üîÑ <b>–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥...</b>",
                parse_mode='html'
            )
            
            await asyncio.sleep(5)
            await self.restart_bot()
            
        except Exception as e:
            await event.edit(
                "‚ùå <b>–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è</b>\n\n"
                f"<code>{str(e)}</code>",
                parse_mode='html'
            )

    async def handle_clean(self, event: Message):
        """–û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞ –∏ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤"""
        if not await self.is_owner(event):
            return
            
        try:
            msg = await event.edit("üßπ <b>–û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞...</b>", parse_mode='html')
            
            for root, _, files in os.walk('.'):
                for file in files:
                    if file.endswith(('.pyc', '.pyo')):
                        os.remove(os.path.join(root, file))
            
            for root, dirs, _ in os.walk('.'):
                if '__pycache__' in dirs:
                    shutil.rmtree(os.path.join(root, '__pycache__'))
            
            await msg.edit(
                "‚úÖ <b>–û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!</b>\n\n"
                "–í—Å–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –∏ –∫—ç—à —É–¥–∞–ª–µ–Ω—ã.",
                parse_mode='html'
            )
            
        except Exception as e:
            await event.edit(
                "‚ùå <b>–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏</b>\n\n"
                f"<code>{str(e)}</code>",
                parse_mode='html'
            )

    async def handle_loadmod(self, event: Message):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥—É–ª—è"""
        if not await self.is_owner(event):
            return
            
        if not event.is_reply:
            response = await event.edit("‚ùå –û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Ñ–∞–π–ª –º–æ–¥—É–ª—è (.py)")
            await asyncio.sleep(3)
            await response.delete()
            return
            
        reply = await event.get_reply_message()
        if not reply.file or not reply.file.name.endswith('.py'):
            response = await event.edit("‚ùå –§–∞–π–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å .py –º–æ–¥—É–ª–µ–º")
            await asyncio.sleep(3)
            await response.delete()
            return
            
        try:
            path = await reply.download_media(file=self.MODS_DIR)
            module_name = os.path.splitext(os.path.basename(path))[0]
            
            if await self.manager.load_module(module_name):
                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–æ–¥—É–ª–µ
                module_data = self.manager.modules[module_name]
                module = module_data['module']
                
                # –ü–æ–ª—É—á–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –∏–∑ docstring
                desc = (getattr(module, '__doc__', '–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è').strip().split('\n')[0].strip())
                
                # –ü–æ–ª—É—á–∞–µ–º –≤–µ—Ä—Å–∏—é 
                version = getattr(module, 'version', '1.0')
                
                # –ü–æ–ª—É—á–∞–µ–º –∫–æ–º–∞–Ω–¥—ã
                commands = getattr(module, 'commands', {})
                if isinstance(commands, list):
                    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ –≤ —Å–ª–æ–≤–∞—Ä—å —Å –ø—É—Å—Ç—ã–º–∏ –æ–ø–∏—Å–∞–Ω–∏—è–º–∏
                    commands = {cmd: "" for cmd in commands}
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                info_msg = [
                    f"‚úÖ <b>–ú–æ–¥—É–ª—å {module_name} v{version} —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω!</b>",
                    "",
                    f"üìù <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {desc}",
                    ""
                ]
                
                if commands:
                    info_msg.append("‚öôÔ∏è <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>")
                    for cmd, desc in commands.items():
                        cmd_desc = f" - {desc}" if desc else ""
                        info_msg.append(f"‚Ä¢ <code>{self.manager.prefix}{cmd}</code>{cmd_desc}")
                    info_msg.append("")
                
                await event.edit("\n".join(info_msg), parse_mode='html')
            else:
                await event.edit("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥—É–ª—è")
                
        except Exception as e:
            await event.edit(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
            if os.path.exists(path):
                os.remove(path)

    async def handle_getmod(self, event: Message):
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª –º–æ–¥—É–ª—è –≤ —á–∞—Ç"""
        if not await self.is_owner(event):
            return
            
        module_name = event.pattern_match.group(1)
        
        if module_name not in self.manager.modules:
            await event.edit(
                "‚ùå <b>–ú–æ–¥—É–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω</b>\n\n"
                f"–ú–æ–¥—É–ª—å <code>{module_name}</code> –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω.",
                parse_mode='html'
            )
            return
            
        try:
            module_data = self.manager.modules[module_name]
            module = module_data['module']
            
            desc = getattr(module, '__doc__', '–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è').strip()
            version = getattr(module, 'version', '1.0')
            commands = getattr(module, 'commands', [])
            
            info_msg = [
                f"üì¶ <b>–ú–æ–¥—É–ª—å {module_name} v{version}</b>",
                f"üìù <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {desc}",
                "",
                "üõ† <b>–ö–æ–º–∞–Ω–¥—ã:</b>",
                *[f"‚Ä¢ <code>{self.manager.prefix}{cmd}</code>" for cmd in commands],
                "",
                "‚¨áÔ∏è <i>–§–∞–π–ª –º–æ–¥—É–ª—è:</i>"
            ]
            
            await event.delete()
            await self.manager.client.send_message(
                event.chat_id,
                "\n".join(info_msg),
                parse_mode='html',
                file=module_data['path']
            )
            
        except Exception as e:
            await event.edit(
                "‚ùå <b>–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–æ–¥—É–ª—è</b>\n\n"
                f"<code>{str(e)}</code>",
                parse_mode='html'
            )

    async def handle_unloadmod(self, event: Message):
        """–ü–æ–ª–Ω–æ—Å—Ç—å—é —É–¥–∞–ª–∏—Ç—å –º–æ–¥—É–ª—å"""
        if not await self.is_owner(event):
            return
            
        module_name = event.pattern_match.group(1)
        
        if module_name not in self.manager.modules:
            await event.edit(
                "‚ùå <b>–ú–æ–¥—É–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω</b>\n\n"
                f"–ú–æ–¥—É–ª—å <code>{module_name}</code> –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω.",
                parse_mode='html'
            )
            return
            
        try:
            module_path = self.manager.modules[module_name]['path']
            
            if await self.manager.unload_module(module_name):
                os.remove(module_path)
                await event.edit(
                    "‚úÖ <b>–ú–æ–¥—É–ª—å –ø–æ–ª–Ω–æ—Å—Ç—å—é —É–¥–∞–ª–µ–Ω</b>\n\n"
                    f"–ú–æ–¥—É–ª—å <code>{module_name}</code> –±—ã–ª:\n"
                    "1. –í—ã–≥—Ä—É–∂–µ–Ω –∏–∑ –ø–∞–º—è—Ç–∏\n"
                    "2. –û—á–∏—â–µ–Ω –∫—ç—à\n"
                    f"3. –§–∞–π–ª —É–¥–∞–ª–µ–Ω: <code>{os.path.basename(module_path)}</code>",
                    parse_mode='html'
                )
            else:
                await event.edit(
                    "‚ö†Ô∏è <b>–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–≥—Ä—É–∑–∏—Ç—å –º–æ–¥—É–ª—å</b>\n\n"
                    "–§–∞–π–ª –Ω–µ –±—ã–ª —É–¥–∞–ª–µ–Ω.",
                    parse_mode='html'
                )
                
        except Exception as e:
            await event.edit(
                "‚ùå <b>–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è</b>\n\n"
                f"<code>{str(e)}</code>",
                parse_mode='html'
            )

    async def handle_modlist(self, event: Message):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –º–æ–¥—É–ª–µ–π"""
        if not await self.is_owner(event):
            return
            
        if not self.manager.modules:
            await event.edit("‚ÑπÔ∏è –ù–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –º–æ–¥—É–ª–µ–π")
            return
            
        mod_list = [
            "üì¶ <b>–ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –º–æ–¥—É–ª–∏:</b>",
            f"üîπ –í—Å–µ–≥–æ: {len(self.manager.modules)}",
            ""
        ]
        
        for mod_name, mod_data in self.manager.modules.items():
            module = mod_data['module']
            desc = getattr(module, '__doc__', '–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è').split('\n')[0]
            version = getattr(module, 'version', '1.0')
            uptime = datetime.now() - mod_data['loaded_at']
            
            mod_list.append(
                f"‚Ä¢ <b>{mod_name}</b> (v{version})\n"
                f"  <i>{desc}</i>\n"
                f"  üïí –ó–∞–≥—Ä—É–∂–µ–Ω: {uptime.seconds // 3600}—á {(uptime.seconds % 3600) // 60}–º –Ω–∞–∑–∞–¥\n"
                f"  üìÇ <code>{os.path.basename(mod_data['path'])}</code>"
            )
        
        await event.edit("\n".join(mod_list), parse_mode='html')

    async def handle_translate(self, event: Message):
        """–ü–µ—Ä–µ–≤–æ–¥—á–∏–∫"""
        if not await self.is_owner(event):
            return
            
        if not event.is_reply:
            await event.edit("‚ùå –û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞")
            return
            
        target_lang = event.pattern_match.group(1)
        if not target_lang:
            await event.edit("‚ùå –£–∫–∞–∂–∏—Ç–µ —è–∑—ã–∫ –ø–µ—Ä–µ–≤–æ–¥–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: .tr en)")
            return
            
        reply = await event.get_reply_message()
        text = reply.text
        
        try:
            translator = Translator()
            translated = translator.translate(text, dest=target_lang)
            await event.edit(
                f"üåê –ü–µ—Ä–µ–≤–æ–¥ ({translated.src} ‚Üí {target_lang}):\n\n"
                f"{translated.text}"
            )
        except Exception as e:
            await event.edit(f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞: {str(e)}")

    async def handle_calc(self, event: Message):
        """–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä"""
        if not await self.is_owner(event):
            return
            
        expr = event.pattern_match.group(1)
        try:
            result = eval(expr)
            await event.edit(f"üßÆ –†–µ–∑—É–ª—å—Ç–∞—Ç: {result}")
        except Exception as e:
            await event.edit(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è: {str(e)}")

    async def restart_bot(self, event: Message = None):
        """–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ —é–∑–µ—Ä–±–æ—Ç–∞"""
        if event and not await self.is_owner(event):
            return
            
        if event:
            await event.edit("üîÑ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞...")
        
        await self.manager.save_loaded_modules()
        os.execl(sys.executable, sys.executable, *sys.argv)

    def register_handlers(self):
        prefix = re.escape(self.manager.prefix)
        
        cmd_handlers = [
            (rf'^{prefix}help$', self.handle_help),
            (rf'^{prefix}ping$', self.handle_ping),
            (rf'^{prefix}info$', self.handle_info),
            (rf'^{prefix}update$', self.handle_update),
            (rf'^{prefix}clean$', self.handle_clean),
            (rf'^{prefix}loadmod$', self.handle_loadmod),
            (rf'^{prefix}getmod (\w+)$', self.handle_getmod),
            (rf'^{prefix}unloadmod (\w+)$', self.handle_unloadmod),
            (rf'^{prefix}reloadmod (\w+)$', self.handle_reloadmod),
            (rf'^{prefix}modlist$', self.handle_modlist),
            (rf'^{prefix}tr (\w+)$', self.handle_translate),
            (rf'^{prefix}calc (.+)$', self.handle_calc),
            (rf'^{prefix}restart$', self.restart_bot),
            (rf'^{prefix}logs$', self.handle_logs),
        ]
        
        for pattern, handler in cmd_handlers:
            self.manager.client.add_event_handler(
                handler,
                events.NewMessage(pattern=pattern, outgoing=True)
            )

async def main(client=None):
    if client is None:
        client = TelegramClient(SESSION_FILE, API_ID, API_HASH)
        try:
            await client.start()
            print("‚úÖ [–°–∏—Å—Ç–µ–º–∞] –Æ–∑–µ—Ä–±–æ—Ç –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω")
        except Exception as e:
            print(f"‚ùå [–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏] {str(e)}")
            return
    
    try:
        prefix = DEFAULT_PREFIX
        if os.path.exists(PREFIX_FILE):
            with open(PREFIX_FILE, 'r') as f:
                prefix = f.read().strip() or DEFAULT_PREFIX

        manager = ModuleManager(client)
        manager.prefix = prefix
        
        core_commands = CoreCommands(manager)
        await core_commands.initialize()
        core_commands.register_handlers()

        await manager.load_all_modules()

        print(f"üü¢ [–°–∏—Å—Ç–µ–º–∞] –Æ–∑–µ—Ä–±–æ—Ç –∑–∞–ø—É—â–µ–Ω | –ü—Ä–µ—Ñ–∏–∫—Å: '{prefix}'")
        print("üîπ –û—Ç–ø—Ä–∞–≤—å—Ç–µ .help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥")
        
        await client.run_until_disconnected()
        
    except Exception as e:
        print(f"‚ùå [–û—à–∏–±–∫–∞] {str(e)}")
        traceback.print_exc()
    finally:
        if client.is_connected():
            await client.disconnect()

if __name__ == '__main__':
    asyncio.run(main())