import os
import sys
import importlib
import asyncio
import re
import shutil
import traceback
import platform
import telethon
from datetime import datetime
from telethon import TelegramClient, events
from config import API_ID, API_HASH, BOT_TOKEN

# ====================== –ö–û–ù–°–¢–ê–ù–¢–´ ======================
MODS_DIR = 'source/mods/'
PREFIX_FILE = 'source/prefix.txt'
DEFAULT_PREFIX = '.'
LOADED_MODS_FILE = '.loaded_mods'
GIF_URL = "https://tenor.com/vzU4iQebtgZ.gif"
GIF_FILENAME = "welcome.gif"

# ====================== –ú–ï–ù–ï–î–ñ–ï–† –ú–û–î–£–õ–ï–ô ======================
class ModuleManager:
    def __init__(self, client):
        self.client = client
        self.modules = {}
        self.prefix = DEFAULT_PREFIX
        self.start_time = datetime.now()
        self.stats = {
            'received': 0,
            'sent': 0,
            'active_users': set()
        }
        os.makedirs(MODS_DIR, exist_ok=True)

    def set_prefix(self, prefix):
        self.prefix = prefix

    async def load_module(self, module_name):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥—É–ª—è —Å –ø–æ–ª–Ω–æ–π –∏–∑–æ–ª—è—Ü–∏–µ–π"""
        try:
            self._clean_cache(module_name)
            module_path = os.path.join(MODS_DIR, f"{module_name}.py")
            
            spec = importlib.util.spec_from_file_location(
                f"userbot.mods.{module_name}", 
                module_path
            )
            module = importlib.util.module_from_spec(spec)
            sys.modules[f"userbot.mods.{module_name}"] = module
            spec.loader.exec_module(module)
            
            handlers = []
            if hasattr(module, 'on_load'):
                handlers = await module.on_load(self.client, self.prefix) or []
            
            self.modules[module_name] = {
                'module': module,
                'path': module_path,
                'handlers': handlers,
                'loaded_at': datetime.now()
            }
            
            print(f"‚úÖ [–ú–æ–¥—É–ª—å] {module_name} —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω")
            return True
            
        except Exception as e:
            print(f"‚ùå [–û—à–∏–±–∫–∞] –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –º–æ–¥—É–ª—å {module_name}:")
            traceback.print_exc()
            return False

    async def unload_module(self, module_name):
        """–ü–æ–ª–Ω–∞—è –≤—ã–≥—Ä—É–∑–∫–∞ –º–æ–¥—É–ª—è"""
        if module_name not in self.modules:
            return False
            
        module_data = self.modules[module_name]
        
        try:
            if hasattr(module_data['module'], 'on_unload'):
                await module_data['module'].on_unload()
            
            for handler in module_data['handlers']:
                try:
                    self.client.remove_event_handler(handler)
                except:
                    pass
            
            del sys.modules[f"userbot.mods.{module_name}"]
            del self.modules[module_name]
            
            import gc
            gc.collect()
            
            print(f"‚úÖ [–ú–æ–¥—É–ª—å] {module_name} –≤—ã–≥—Ä—É–∂–µ–Ω")
            return True
            
        except Exception as e:
            print(f"‚ùå [–û—à–∏–±–∫–∞] –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–≥—Ä—É–∑–∏—Ç—å –º–æ–¥—É–ª—å {module_name}:")
            traceback.print_exc()
            return False

    async def reload_module(self, module_name):
        await self.unload_module(module_name)
        return await self.load_module(module_name)

    def _clean_cache(self, module_name):
        """–û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞ –º–æ–¥—É–ª—è"""
        cache_dir = os.path.join(MODS_DIR, '__pycache__')
        if os.path.exists(cache_dir):
            shutil.rmtree(cache_dir)
        
        pyc_file = os.path.join(MODS_DIR, f"{module_name}.pyc")
        if os.path.exists(pyc_file):
            os.remove(pyc_file)

    def get_module_info(self, module_name):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–æ–¥—É–ª–µ"""
        if module_name not in self.modules:
            return None
            
        try:
            with open(self.modules[module_name]['path'], 'r', encoding='utf-8') as f:
                lines = [f.readline().strip() for _ in range(5)]
                
            info = {
                'name': module_name,
                'commands': '–ù–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏',
                'description': '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è',
                'version': '1.0'
            }
            
            for line in lines:
                if line.startswith('# name:'):
                    info['name'] = line[7:].strip()
                elif line.startswith('# commands:'):
                    info['commands'] = line[11:].strip()
                elif line.startswith('# desc:'):
                    info['description'] = line[6:].strip()
                elif line.startswith('# version:'):
                    info['version'] = line[9:].strip()
            
            return info
        except:
            return {
                'name': module_name,
                'commands': '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ',
                'description': '–ù–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏',
                'version': '1.0'
            }

    async def load_all_modules(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö –º–æ–¥—É–ª–µ–π –∏–∑ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏"""
        print(f"üîç [–°–∏—Å—Ç–µ–º–∞] –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞–ø–∫–∏ –º–æ–¥—É–ª–µ–π...")
        
        if not os.path.exists(LOADED_MODS_FILE):
            for filename in os.listdir(MODS_DIR):
                if filename.endswith('.py') and not filename.startswith('_'):
                    await self.load_module(filename[:-3])
        else:
            with open(LOADED_MODS_FILE, 'r') as f:
                for module_name in f.read().splitlines():
                    if module_name:
                        await self.load_module(module_name)
            os.remove(LOADED_MODS_FILE)
        
        print(f"üì¶ [–°–∏—Å—Ç–µ–º–∞] –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(self.modules)} –º–æ–¥—É–ª–µ–π")

    async def save_loaded_modules(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –º–æ–¥—É–ª–µ–π"""
        with open(LOADED_MODS_FILE, 'w') as f:
            f.write('\n'.join(self.modules.keys()))

# ====================== –ö–û–ú–ê–ù–î–´ –Ø–î–†–ê ======================
class CoreCommands:
    def __init__(self, manager):
        self.manager = manager
    
    async def is_owner(self, event):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–ª–∞–¥–µ–ª—å—Ü–∞ –±–æ—Ç–∞"""
        me = await event.client.get_me()
        return event.sender_id == me.id
    
    async def update_bot(self, event):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–æ—Ç–∞ –∏–∑ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è"""
        if not await self.is_owner(event):
            return
            
        try:
            await event.edit("üîÑ [–°–∏—Å—Ç–µ–º–∞] –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π...")
            
            # –ö–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
            repo_url = "https://github.com/theLuni/AcrokaUB.git"
            temp_dir = "temp_update"
            
            if os.path.exists(temp_dir):
                shutil.rmtree(temp_dir)
            
            os.makedirs(temp_dir, exist_ok=True)
            
            # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ git-–∫–æ–º–∞–Ω–¥
            cmds = [
                ['git', 'clone', repo_url, temp_dir],
                ['cp', '-r', f'{temp_dir}/*', '.'],
                ['rm', '-rf', temp_dir]
            ]
            
            for cmd in cmds:
                proc = await asyncio.create_subprocess_exec(*cmd)
                await proc.wait()
            
            await event.edit("‚úÖ [–°–∏—Å—Ç–µ–º–∞] –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω! –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞...")
            await self.restart_bot(event)
            
        except Exception as e:
            await event.edit(f"‚ùå [–û—à–∏–±–∫–∞] –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –±–æ—Ç–∞:\n{str(e)}")

    async def get_module(self, event):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –º–æ–¥—É–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
        if not await self.is_owner(event):
            return
            
        module_name = event.pattern_match.group(1)
        
        if module_name not in self.manager.modules:
            await event.edit(f"‚ùå [–ú–æ–¥—É–ª—å] {module_name} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
            
        try:
            module_path = self.manager.modules[module_name]['path']
            await event.client.send_file(
                event.chat_id,
                module_path,
                caption=f"üì¶ –ú–æ–¥—É–ª—å: {module_name}",
                reply_to=event.id
            )
            await event.delete()
        except Exception as e:
            await event.edit(f"‚ùå [–û—à–∏–±–∫–∞] –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –º–æ–¥—É–ª—å:\n{str(e)}")

    async def restart_bot(self, event=None):
        """–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –±–æ—Ç–∞"""
        if event and not await self.is_owner(event):
            return
            
        if event:
            await event.edit("üîÑ [–°–∏—Å—Ç–µ–º–∞] –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞...")
        
        await self.manager.save_loaded_modules()
        os.execl(sys.executable, sys.executable, *sys.argv)

    async def handle_help(self, event):
        """–ü–æ–∫–∞–∑ —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥"""
        if not await self.is_owner(event):
            return
        
        self.manager.stats['received'] += 1
        self.manager.stats['active_users'].add(event.sender_id)

        prefix = self.manager.prefix
        base_commands = [
            f"üìú {prefix}info - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ",
            f"üèì {prefix}ping - –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∏–Ω–≥–∞",
            f"üì¶ {prefix}loadmod - –ó–∞–≥—Ä—É–∑–∏—Ç—å –º–æ–¥—É–ª—å (–æ—Ç–≤–µ—Ç –Ω–∞ —Ñ–∞–π–ª)",
            f"üóëÔ∏è {prefix}unloadmod <–∏–º—è> - –í—ã–≥—Ä—É–∑–∏—Ç—å –º–æ–¥—É–ª—å",
            f"üîÑ {prefix}reloadmod <–∏–º—è> - –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å –º–æ–¥—É–ª—å",
            f"üì§ {prefix}getmod <–∏–º—è> - –ü–æ–ª—É—á–∏—Ç—å —Ñ–∞–π–ª –º–æ–¥—É–ª—è",
            f"üîÑ {prefix}update - –û–±–Ω–æ–≤–∏—Ç—å –±–æ—Ç–∞",
            f"‚öôÔ∏è {prefix}setprefix <—Å–∏–º–≤–æ–ª> - –ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–µ—Ñ–∏–∫—Å",
            f"üîÑ {prefix}restart - –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞",
            f"üìã {prefix}modules - –°–ø–∏—Å–æ–∫ –º–æ–¥—É–ª–µ–π"
        ]

        message = "‚ú® <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n"
        message += f"<code>–ü—Ä–µ—Ñ–∏–∫—Å: '{prefix}'</code>\n\n"
        
        message += "üîπ <b>–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n"
        message += "\n".join(f"‚Ä¢ {cmd}" for cmd in base_commands)
        
        if self.manager.modules:
            message += "\n\nüîπ <b>–ú–æ–¥—É–ª–∏:</b>\n"
            for name in self.manager.modules:
                info = self.manager.get_module_info(name)
                message += f"‚Ä¢ <code>{name}</code> - {info['commands']}\n"
        
        await event.edit(message, parse_mode='html')

    def register_handlers(self):
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥"""
        prefix = re.escape(self.manager.prefix)
        
        cmd_handlers = [
            (rf'^{prefix}help$', self.handle_help),
            (rf'^{prefix}update$', self.update_bot),
            (rf'^{prefix}getmod (\w+)$', self.get_module),
            (rf'^{prefix}restart$', self.restart_bot),
        ]
        
        for pattern, handler in cmd_handlers:
            self.manager.client.add_event_handler(
                handler,
                events.NewMessage(pattern=pattern, outgoing=False)
            )

# ====================== –ó–ê–ü–£–°–ö –ë–û–¢–ê ======================
async def main():
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞
    client = TelegramClient('userbot_session', API_ID, API_HASH)
    await client.start(bot_token=BOT_TOKEN)
    print("‚úÖ [–°–∏—Å—Ç–µ–º–∞] –ë–æ—Ç –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω")

    # –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–µ—Ñ–∏–∫—Å–∞
    prefix = DEFAULT_PREFIX
    if os.path.exists(PREFIX_FILE):
        with open(PREFIX_FILE, 'r') as f:
            prefix = f.read().strip() or DEFAULT_PREFIX

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –º–æ–¥—É–ª–µ–π
    manager = ModuleManager(client)
    manager.set_prefix(prefix)
    await manager.load_all_modules()

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥ —è–¥—Ä–∞
    CoreCommands(manager).register_handlers()

    print("üü¢ [–°–∏—Å—Ç–µ–º–∞] –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
    try:
        await client.run_until_disconnected()
    finally:
        await manager.save_loaded_modules()
        await client.disconnect()

if __name__ == '__main__':
    asyncio.run(main())
