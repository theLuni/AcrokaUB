import os
import sys
import json
from pathlib import Path
from typing import Optional, Tuple, Dict

class ConfigManager:
    def __init__(self):
        self.BASE_DIR = Path(__file__).parent
        self.CONFIG_DIR = self.BASE_DIR / 'config'
        self.CONFIG_DIR.mkdir(exist_ok=True)
        
        self.CONFIG_FILE = self.CONFIG_DIR / 'settings.json'
        self.BOT_TOKEN_FILE = self.CONFIG_DIR / 'bot_token.txt'
        
        self.settings = self._load_settings()
        self.API_ID = self.settings.get('api_id')
        self.API_HASH = self.settings.get('api_hash')
        self.BOT_TOKEN = self._load_bot_token()

    def _load_settings(self) -> Dict:
        """–ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏–∑ JSON —Ñ–∞–π–ª–∞"""
        default_settings = {
            'api_id': '',
            'api_hash': '',
            'session_name': 'default_session'
        }
        
        if self.CONFIG_FILE.exists():
            try:
                with open(self.CONFIG_FILE, 'r', encoding='utf-8') as f:
                    loaded = json.load(f)
                    if all(k in loaded for k in ['api_id', 'api_hash']):
                        return loaded
            except (json.JSONDecodeError, IOError):
                pass
        
        return default_settings

    def _save_settings(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –≤ JSON —Ñ–∞–π–ª"""
        try:
            with open(self.CONFIG_FILE, 'w', encoding='utf-8') as f:
                json.dump(self.settings, f, indent=4, ensure_ascii=False)
        except IOError as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫: {e}", file=sys.stderr)

    def _load_bot_token(self) -> Optional[str]:
        """–ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–∫–µ–Ω–∞ –±–æ—Ç–∞ –∏–∑ —Ñ–∞–π–ª–∞"""
        if not self.BOT_TOKEN_FILE.exists():
            return None
            
        try:
            with open(self.BOT_TOKEN_FILE, 'r', encoding='utf-8') as f:
                token_line = f.read().strip()
                parts = token_line.split(':')
                
                if len(parts) >= 4 and len(parts[3]) >= 30 and parts[3].startswith('AAG'):
                    return ':'.join(parts[2:])
        except Exception:
            return None
            
        return None

    def _input_credentials(self):
        """–ö—Ä–∞—Å–∏–≤—ã–π –≤–≤–æ–¥ —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        from getpass import getpass
        
        print("\n" + "="*40)
        print("üîê –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ Telegram".center(40))
        print("="*40 + "\n")
        
        print("1. –ü–æ–ª—É—á–∏—Ç—å API ID –∏ Hash:")
        print("   - –ü–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ https://my.telegram.org")
        print("   - –°–æ–∑–¥–∞–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≤ —Ä–∞–∑–¥–µ–ª–µ 'API development tools'\n")
        
        try:
            self.settings['api_id'] = input("–í–≤–µ–¥–∏—Ç–µ API ID: ").strip()
            self.settings['api_hash'] = getpass("–í–≤–µ–¥–∏—Ç–µ API Hash: ").strip()
            
            print("\n" + "="*40)
            print("üöÄ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!".center(40))
            print("="*40 + "\n")
            
            self._save_settings()
        except (EOFError, KeyboardInterrupt):
            print("\n‚ö†Ô∏è –í–≤–æ–¥ –ø—Ä–µ—Ä–≤–∞–Ω. –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.", file=sys.stderr)
            sys.exit(1)

    def _menu_interactive(self):
        """–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"""
        while True:
            print("\n–ú–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:")
            print("1. –í–≤–µ—Å—Ç–∏ API ID –∏ Hash –≤—Ä—É—á–Ω—É—é")
            print("2. –ó–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ —Ñ–∞–π–ª–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
            print("3. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")
            print("4. –í—ã—Ö–æ–¥")
            
            try:
                choice = input("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ (1-4): ").strip()
                
                if choice == '1':
                    self._input_credentials()
                    return
                elif choice == '2':
                    if self.CONFIG_FILE.exists():
                        self.settings = self._load_settings()
                        print("‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ —Ñ–∞–π–ª–∞")
                        return
                    print("‚ö†Ô∏è –§–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω", file=sys.stderr)
                elif choice == '3':
                    self._show_current_settings()
                elif choice == '4':
                    sys.exit("–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞")
                else:
                    print("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞", file=sys.stderr)
            except (EOFError, KeyboardInterrupt):
                print("\n‚ö†Ô∏è –í–≤–æ–¥ –ø—Ä–µ—Ä–≤–∞–Ω.", file=sys.stderr)
                sys.exit(1)

    def _show_current_settings(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"""
        print("\n–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:")
        print(f"API ID: {'—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' if self.settings.get('api_id') else '–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}")
        print(f"API Hash: {'—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' if self.settings.get('api_hash') else '–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}")
        print(f"–¢–æ–∫–µ–Ω –±–æ—Ç–∞: {'—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' if self.BOT_TOKEN else '–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}")

    def setup(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"""
        if not self.settings.get('api_id') or not self.settings.get('api_hash'):
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ç–µ—Ä–º–∏–Ω–∞–ª
                if sys.stdin.isatty():
                    self._menu_interactive()
                else:
                    raise RuntimeError("–ù–µ—Ç –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ç–µ—Ä–º–∏–Ω–∞–ª–∞ –¥–ª—è –≤–≤–æ–¥–∞")
            except Exception as e:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏: {e}", file=sys.stderr)
                sys.exit(1)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –Ω–∞—Å—Ç—Ä–æ–µ–∫
        if not str(self.settings['api_id']).isdigit() or len(self.settings['api_hash']) < 10:
            print("\n‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç API ID/Hash.", file=sys.stderr)
            sys.exit(1)


# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
try:
    config = ConfigManager()
    
    # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ç–µ—Ä–º–∏–Ω–∞–ª
    if sys.stdin.isatty() and (not config.API_ID or not config.API_HASH):
        config.setup()

    API_ID = config.API_ID
    API_HASH = config.API_HASH
    BOT_TOKEN = config.BOT_TOKEN

except Exception as e:
    print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}", file=sys.stderr)
    sys.exit(1)
