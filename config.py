import os
from typing import Tuple, Optional

# üìÇ –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
CONFIG_DIR = 'config'
API_CREDENTIALS_FILE = os.path.join(CONFIG_DIR, 'api_credentials.txt')
BOT_TOKEN_FILE = os.path.join(CONFIG_DIR, 'bot_token.txt')

# üîÑ –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É config, –µ—Å–ª–∏ –µ–µ –Ω–µ—Ç
os.makedirs(CONFIG_DIR, exist_ok=True)


def get_api_credentials() -> Tuple[str, str]:
    """
    üîë –ü–æ–ª—É—á–∞–µ—Ç API ID –∏ API Hash –∏–∑ —Ñ–∞–π–ª–∞ –∏–ª–∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
        Tuple[str, str]: –ö–æ—Ä—Ç–µ–∂ (API_ID, API_HASH)
        
    –í—ã–∑—ã–≤–∞–µ—Ç:
        ValueError: –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –Ω–µ–≤–µ—Ä–Ω—ã–µ –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç
    """
    if os.path.exists(API_CREDENTIALS_FILE):
        try:
            with open(API_CREDENTIALS_FILE) as f:
                credentials = [line.strip() for line in f if line.strip()]
                if len(credentials) >= 2:
                    print("üîë –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ API-–¥–∞–Ω–Ω—ã–µ")
                    return tuple(credentials[:2])
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è API-–¥–∞–Ω–Ω—ã—Ö: {e}")

    print("\nüîê –¢—Ä–µ–±—É—é—Ç—Å—è –¥–∞–Ω–Ω—ã–µ Telegram API (–ø–æ–ª—É—á–∏—Ç—å –Ω–∞ my.telegram.org)")
    api_id = input("üìù –í–≤–µ–¥–∏—Ç–µ API ID: ").strip()
    api_hash = input("üîí –í–≤–µ–¥–∏—Ç–µ API Hash: ").strip()

    if not (api_id and api_hash):
        raise ValueError("‚ùå API ID –∏ Hash –Ω–µ –º–æ–≥—É—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º–∏")

    with open(API_CREDENTIALS_FILE, 'w') as f:
        f.write(f"{api_id}\n{api_hash}")
    
    print("‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")
    return api_id, api_hash


def get_bot_token() -> Optional[str]:
    """
    ü§ñ –ü–æ–ª—É—á–∞–µ—Ç —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –∏–∑ —Ñ–∞–π–ª–∞.
    
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
        Optional[str]: –¢–æ–∫–µ–Ω –±–æ—Ç–∞ –∏–ª–∏ None, –µ—Å–ª–∏ —Ç–æ–∫–µ–Ω –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π
    """
    if not os.path.exists(BOT_TOKEN_FILE):
        print("‚ö†Ô∏è –§–∞–π–ª —Å —Ç–æ–∫–µ–Ω–æ–º –±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return None

    with open(BOT_TOKEN_FILE) as f:
        token = f.read().strip()

    if not token:
        print("‚ö†Ô∏è –§–∞–π–ª —Å —Ç–æ–∫–µ–Ω–æ–º –±–æ—Ç–∞ –ø—É—Å—Ç")
        return None

    if ':' not in token or len(token.split(':')[1]) < 30:
        print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–æ–∫–µ–Ω–∞ –±–æ—Ç–∞")
        return None

    print("üîë –¢–æ–∫–µ–Ω –±–æ—Ç–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω")
    return token


def initialize_config() -> None:
    """‚öôÔ∏è –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã."""
    global BOT_TOKEN, API_ID, API_HASH
    
    try:
        BOT_TOKEN = get_bot_token()
        API_ID, API_HASH = get_api_credentials()
        print("\nüéâ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞!")
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")
        print("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã")
        raise


# üöÄ –ó–∞–ø—É—Å–∫ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
if __name__ == '__main__':
    initialize_config()
