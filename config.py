import os
import sys
import json
from pathlib import Path
from typing import Optional, Dict

class TelegramConfig:
    def __init__(self):
        self.BASE_DIR = Path(__file__).parent
        self.CONFIG_FILE = self.BASE_DIR / 'config' / 'telegram_config.json'
        self.BOT_TOKEN_FILE = self.BASE_DIR / 'config' / 'bot_token.txt'
        
        # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É config –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        self.CONFIG_FILE.parent.mkdir(exist_ok=True)
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        self.config = self._load_config()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        if not self._validate_credentials():
            self._setup_credentials()

    def _load_config(self) -> Dict:
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–∑ —Ñ–∞–π–ª–∞"""
        default_config = {
            'api_id': '',
            'api_hash': '',
            'session_name': 'default_session'
        }
        
        if self.CONFIG_FILE.exists():
            try:
                with open(self.CONFIG_FILE, 'r', encoding='utf-8') as f:
                    config = json.load(f)
                    return {**default_config, **config}
            except (json.JSONDecodeError, IOError) as e:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥–∞: {e}", file=sys.stderr)
        
        return default_config

    def _save_config(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –≤ —Ñ–∞–π–ª"""
        try:
            with open(self.CONFIG_FILE, 'w', encoding='utf-8') as f:
                json.dump(self.config, f, indent=4, ensure_ascii=False)
        except IOError as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥–∞: {e}", file=sys.stderr)

    def _validate_credentials(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        api_id = self.config.get('api_id', '')
        api_hash = self.config.get('api_hash', '')
        return bool(api_id and api_hash and str(api_id).isdigit() and len(api_hash) >= 10)

    def _setup_credentials(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        print("\nüîê –¢—Ä–µ–±—É–µ—Ç—Å—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ Telegram API", file=sys.stderr)
        print("1. –ü–æ–ª—É—á–∏—Ç–µ API ID –∏ Hash –Ω–∞ https://my.telegram.org", file=sys.stderr)
        print("2. –°–æ–∑–¥–∞–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≤ —Ä–∞–∑–¥–µ–ª–µ 'API development tools'\n", file=sys.stderr)
        
        try:
            self.config['api_id'] = input("–í–≤–µ–¥–∏—Ç–µ API ID: ").strip()
            self.config['api_hash'] = input("–í–≤–µ–¥–∏—Ç–µ API Hash: ").strip()
            
            if not self._validate_credentials():
                print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ", file=sys.stderr)
                sys.exit(1)
                
            self._save_config()
            print("‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã", file=sys.stderr)
        except (EOFError, KeyboardInterrupt):
            print("\n‚ùå –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞", file=sys.stderr)
            sys.exit(1)

    def _load_bot_token(self) -> Optional[str]:
        """–ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–∫–µ–Ω–∞ –±–æ—Ç–∞ –∏–∑ —Ñ–∞–π–ª–∞"""
        if not self.BOT_TOKEN_FILE.exists():
            return None
            
        try:
            with open(self.BOT_TOKEN_FILE, 'r', encoding='utf-8') as f:
                content = f.read().strip()
                if content.count(':') >= 2:
                    parts = content.split(':')
                    if len(parts[3]) >= 30 and parts[3].startswith('AAG'):
                        return ':'.join(parts[2:])
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞: {e}", file=sys.stderr)
        
        return None

    @property
    def api_id(self) -> str:
        return str(self.config['api_id'])

    @property
    def api_hash(self) -> str:
        return self.config['api_hash']

    @property
    def bot_token(self) -> Optional[str]:
        return self._load_bot_token()


# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
try:
    tg_config = TelegramConfig()
    
    # –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    API_ID = tg_config.api_id
    API_HASH = tg_config.api_hash
    BOT_TOKEN = tg_config.bot_token
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    if not API_ID or not API_HASH:
        raise ValueError("API ID –∏ Hash –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã")

except Exception as e:
    print(f"üõë –§–∞—Ç–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞: {str(e)}", file=sys.stderr)
    sys.exit(1)
