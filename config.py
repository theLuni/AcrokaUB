import os
from typing import Tuple, Optional

# –ü—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
SOURCE_FOLDER = 'source'
CONFIG_DIR = 'config'
os.makedirs(SOURCE_FOLDER, exist_ok=True)
os.makedirs(CONFIG_DIR, exist_ok=True)

# –§–∞–π–ª—ã –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
TOKEN_FILE = os.path.join(SOURCE_FOLDER, 'token.txt')
BOT_TOKEN_FILE = os.path.join(CONFIG_DIR, 'bot_token.txt')
API_CREDENTIALS_FILE = os.path.join(CONFIG_DIR, 'api_credentials.txt')

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
API_ID: str = ""
API_HASH: str = ""
BOT_TOKEN: Optional[str] = None

def get_api_credentials() -> Tuple[str, str]:
    if os.path.exists(API_CREDENTIALS_FILE):
        try:
            with open(API_CREDENTIALS_FILE) as f:
                credentials = [line.strip() for line in f if line.strip()]
                if len(credentials) >= 2:
                    print("üîë –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ API-–¥–∞–Ω–Ω—ã–µ –∏–∑ config/api_credentials.txt")
                    return tuple(credentials[:2])
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è API-–¥–∞–Ω–Ω—ã—Ö: {e}")

    if os.path.exists(TOKEN_FILE):
        try:
            with open(TOKEN_FILE, 'r') as f:
                lines = f.read().strip().split('\n')
                if len(lines) >= 2:
                    print("üîë –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ API-–¥–∞–Ω–Ω—ã–µ –∏–∑ source/token.txt")
                    return lines[0], lines[1]
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è API-–¥–∞–Ω–Ω—ã—Ö: {e}")

    print("\nüîê –¢—Ä–µ–±—É—é—Ç—Å—è –¥–∞–Ω–Ω—ã–µ Telegram API (–ø–æ–ª—É—á–∏—Ç—å –Ω–∞ my.telegram.org)")
    api_id = input("üìù –í–≤–µ–¥–∏—Ç–µ API ID: ").strip()
    api_hash = input("üîí –í–≤–µ–¥–∏—Ç–µ API Hash: ").strip()

    if not (api_id and api_hash):
        raise ValueError("‚ùå API ID –∏ Hash –Ω–µ –º–æ–≥—É—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º–∏")

    with open(API_CREDENTIALS_FILE, 'w') as f:
        f.write(f"{api_id}\n{api_hash}")
    
    print(f"‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {API_CREDENTIALS_FILE}")
    return api_id, api_hash

def get_bot_token() -> Optional[str]:
    if os.path.exists(BOT_TOKEN_FILE):
        with open(BOT_TOKEN_FILE, 'r') as f:
            token_line = f.read().strip()
            if token_line:
                if token_line.startswith('AAG') and len(token_line) >= 30:
                    return token_line
                elif ':' in token_line:
                    parts = token_line.split(':')
                    if len(parts) >= 4 and parts[3].startswith('AAG'):
                        return ':'.join(parts[2:])
    
    old_token_file = os.path.join(SOURCE_FOLDER, 'bottoken.txt')
    if os.path.exists(old_token_file):
        with open(old_token_file, 'r') as f:
            token_line = f.read().strip()
            if token_line:
                if token_line.startswith('AAG') and len(token_line) >= 30:
                    return token_line

# –í—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è API ID –∏ API Hash
API_ID, API_HASH = get_api_credentials()
