import os
import random
import string
import subprocess
import asyncio
import platform
from telethon import events, TelegramClient
from datetime import datetime, timedelta
import telethon
import requests
import pyfiglet
from langdetect import detect, DetectorFactory
import re
import importlib.util
import aiohttp
import sys

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–µ—Ç–µ–∫—Ç–æ—Ä–∞ —è–∑—ã–∫–∞
DetectorFactory.seed = 0

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
MODS_DIRECTORY = 'source/mods/'
TOKEN_FILE = 'source/bottoken.txt'
BOT_IMAGE = 'source/pic.png'
GIF_URL = "https://tenor.com/vzU4iQebtgZ.gif"
GIF_FILENAME = "welcome.gif"

# –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
start_time = datetime.now()
received_messages_count = 0
sent_messages_count = 0
active_users = set()
loaded_modules = []

class AcrokaClient:
    def __init__(self, api_id, api_hash):
        self.api_id = api_id
        self.api_hash = api_hash
        self.client = None
        self.bot_client = None
        self.me = None
        
    async def initialize(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ –∏ –ø–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ"""
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é —Å–µ—Å—Å–∏—é –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        temp_client = TelegramClient('temp_session', self.api_id, self.api_hash)
        await temp_client.start()
        self.me = await temp_client.get_me()
        await temp_client.disconnect()
        
        # –°–æ–∑–¥–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞ —Å –∏–º–µ–Ω–µ–º —Å–µ—Å—Å–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        session_name = f'acroka_{self.me.id}'
        self.client = TelegramClient(session_name, self.api_id, self.api_hash)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ —Å–æ–∑–¥–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        os.makedirs(MODS_DIRECTORY, exist_ok=True)
        os.makedirs(os.path.dirname(TOKEN_FILE), exist_ok=True)
        
    async def setup_bot(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–æ—Ç–∞ —á–µ—Ä–µ–∑ BotFather"""
        if not os.path.exists(TOKEN_FILE) or os.stat(TOKEN_FILE).st_size == 0:
            choice = input("–§–∞–π–ª —Ç–æ–∫–µ–Ω–∞ –ø—É—Å—Ç. –•–æ—Ç–∏—Ç–µ –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –±–æ—Ç–∞? (–¥–∞/–Ω–µ—Ç): ").strip().lower()
            
            if choice == '–¥–∞':
                username = input("–í–≤–µ–¥–∏—Ç–µ —é–∑–µ—Ä–Ω–µ–π–º –≤–∞—à–µ–≥–æ –±–æ—Ç–∞ (–±–µ–∑ @): ").strip()
                token_data = await self.get_existing_bot(username)
                
                if token_data:
                    with open(TOKEN_FILE, 'w') as f:
                        f.write(token_data)
                else:
                    print("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω –æ—Ç @BotFather.")
                    return False
            else:
                print("–°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –±–æ—Ç–∞...")
                token_data = await self.create_new_bot()
                if not token_data:
                    return False
        
        return True
    
    async def get_existing_bot(self, username):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –±–æ—Ç–∞"""
        botfather = await self.client.get_input_entity('BotFather')
        
        await self.client.send_message(botfather, '/token')
        await asyncio.sleep(2)
        await self.client.send_message(botfather, f'@{username}')
        await asyncio.sleep(2)
        
        async for message in self.client.iter_messages(botfather, limit=10):
            if "You can use this token to access HTTP API:" in message.text:
                token = message.text.split("You can use this token to access HTTP API:")[1].strip().split()[0].replace("`", "")
                
                # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞–≤–∞—Ç–∞—Ä–∫–∏
                await self.set_bot_photo(username)
                
                return f"{username}:{token.split(':')[0]}:{token}"
        
        return None
    
    async def create_new_bot(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –±–æ—Ç–∞"""
        botfather = await self.client.get_input_entity('BotFather')
        bot_title = 'Acroka'
        username = f'acroka_{"".join(random.choices(string.ascii_lowercase + string.digits, k=5))}_bot'
        
        try:
            await self.client.send_message(botfather, '/newbot')
            await asyncio.sleep(2)
            await self.client.send_message(botfather, bot_title)
            await asyncio.sleep(2)
            await self.client.send_message(botfather, username)
            await asyncio.sleep(5)
            
            token = None
            async for message in self.client.iter_messages(botfather, limit=10):
                if 'Use this token to access the HTTP API:' in message.message:
                    token = message.message.split('\n')[1].strip()
                    break
            
            if not token:
                print("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω –æ—Ç BotFather.")
                return None
            
            # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞–≤–∞—Ç–∞—Ä–∫–∏
            await self.set_bot_photo(username)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –±–æ—Ç–∞
            data = f"{username}:{token.split(':')[0]}:{token}"
            with open(TOKEN_FILE, 'w') as f:
                f.write(data)
                
            return data
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –±–æ—Ç–∞: {e}")
            return None
    
    async def set_bot_photo(self, username):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ñ–æ—Ç–æ –¥–ª—è –±–æ—Ç–∞"""
        if os.path.exists(BOT_IMAGE):
            botfather = await self.client.get_input_entity('BotFather')
            await self.client.send_message(botfather, '/setuserpic')
            await asyncio.sleep(2)
            await self.client.send_message(botfather, f'@{username}')
            await asyncio.sleep(2)
            await self.client.send_file(botfather, BOT_IMAGE)
        else:
            print(f"–§–∞–π–ª –∞–≤–∞—Ç–∞—Ä–∫–∏ {BOT_IMAGE} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    
    async def download_gif(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ GIF"""
        if not os.path.exists(GIF_FILENAME):
            try:
                response = requests.get(GIF_URL, stream=True)
                if response.status_code == 200:
                    with open(GIF_FILENAME, 'wb') as f:
                        for chunk in response.iter_content(1024):
                            f.write(chunk)
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ GIF: {e}")
    
    async def load_module(self, module_name):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥—É–ª—è"""
        try:
            module_path = os.path.join(MODS_DIRECTORY, f"{module_name}.py")
            spec = importlib.util.spec_from_file_location(module_name, module_path)
            module = importlib.util.module_from_spec(spec)
            spec.loader.exec_module(module)
            
            if module_name not in loaded_modules:
                loaded_modules.append(module_name)
                
            if hasattr(module, 'on_load'):
                await module.on_load(self)
                
            return module
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–æ–¥—É–ª—è {module_name}: {e}")
            return None
    
    async def load_all_modules(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö –º–æ–¥—É–ª–µ–π –∏–∑ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏"""
        if os.path.exists(MODS_DIRECTORY):
            for filename in os.listdir(MODS_DIRECTORY):
                if filename.endswith(".py"):
                    module_name = filename[:-3]
                    await self.load_module(module_name)
    
    def get_module_info(self, module_name):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–æ–¥—É–ª–µ"""
        try:
            module_path = os.path.join(MODS_DIRECTORY, f"{module_name}.py")
            with open(module_path, 'r', encoding='utf-8') as f:
                lines = [f.readline().strip() for _ in range(4)]
            
            name = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
            commands = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
            
            for line in lines:
                if line.startswith("#"):
                    key, value = line[1:].split(":", 1)
                    if key.strip() == "name":
                        name = value.strip()
                    elif key.strip() == "commands":
                        commands = value.strip()
            
            return f"{name} ({commands})"
        except Exception:
            return f"{module_name} (–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ)"
    
    async def handle_help(self, event):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã .help"""
        global received_messages_count, active_users
        received_messages_count += 1
        active_users.add(event.sender_id)
        
        modules_list = [f[:-3] for f in os.listdir(MODS_DIRECTORY) if f.endswith(".py")] if os.path.exists(MODS_DIRECTORY) else []
        
        commands_list = [
            "üìú info - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —é–∑–µ—Ä–±–æ—Ç–µ",
            "üèì ping - –ø–∏–Ω–≥ —Å–∏—Å—Ç–µ–º—ã",
            "‚ùì help - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–æ–º–∞–Ω–¥—ã",
            "üì¶ loadmod - –∑–∞–≥—Ä—É–∑–∏—Ç—å –º–æ–¥—É–ª—å",
            "üîÑ unloadmod - —É–¥–∞–ª–∏—Ç—å –º–æ–¥—É–ª—å",
            "üìú modload - –≤—ã–≥—Ä—É–∑–∏—Ç—å –º–æ–¥—É–ª—å",
            "‚è≥ deferral - –ø–æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è",
            "üßÆ calc - –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä",
            "üíª tr - –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫"
        ]
        
        message = "üí° –ö–æ–º–∞–Ω–¥—ã —é–∑–µ—Ä–±–æ—Ç–∞\n\n"
        
        if modules_list:
            message += "‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –º–æ–¥—É–ª–∏:\n"
            for module in modules_list:
                module_info = self.get_module_info(module)
                message += f"   - {module_info}\n"
        else:
            message += "‚ùå –ù–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –º–æ–¥—É–ª–µ–π.\n"
        
        message += "\n‚úÖ –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n" + "\n".join(commands_list)
        
        try:
            await event.message.edit(message)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
    
    async def handle_info(self, event):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã .info"""
        global received_messages_count, active_users
        received_messages_count += 1
        active_users.add(event.sender_id)
        
        uptime = datetime.now() - start_time
        uptime_str = str(uptime).split('.')[0]
        
        info_message = (
            f"üîç Acroka - UserBot:\n\n"
            f"üë§ –í–ª–∞–¥–µ–ª–µ—Ü: {self.me.first_name}\n"
            f"üíª –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞: {platform.system()}\n"
            f"‚è≥ Uptime: {uptime_str}\n"
            f"‚ú® –í–µ—Ä—Å–∏—è Telethon: {telethon.__version__}\n" 
            f"üì• –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {received_messages_count}\n"
            f"üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {sent_messages_count}\n"
            f"üë• –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(active_users)}\n"
        )
        
        await event.edit(info_message)
    
    async def handle_ping(self, event):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã .ping"""
        global received_messages_count, active_users
        received_messages_count += 1
        active_users.add(event.sender_id)
        
        try:
            process = await asyncio.create_subprocess_exec(
                'ping', '-c', '1', 'google.com',
                stdout=asyncio.subprocess.PIPE,
                stderr=asyncio.subprocess.PIPE
            )
            stdout, stderr = await process.communicate()
            
            if process.returncode == 0:
                time = stdout.decode().split('time=')[1].split(' ')[0]
                await event.edit(f"‚úÖ –ü–∏–Ω–≥ –∫ Google: {time}–º—Å")
            else:
                await event.edit("‚ùå –û—à–∏–±–∫–∞ –ø–∏–Ω–≥–∞!")
        except Exception as e:
            await event.edit(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
    
    async def register_handlers(self):
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π"""
        @self.client.on(events.NewMessage(pattern=r'\.help'))
        async def handler(event):
            await self.handle_help(event)
        
        @self.client.on(events.NewMessage(pattern=r'\.info'))
        async def handler(event):
            await self.handle_info(event)
        
        @self.client.on(events.NewMessage(pattern=r'\.ping'))
        async def handler(event):
            await self.handle_ping(event)
        
        # –î—Ä—É–≥–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏...
    
    async def run(self):
        """–ó–∞–ø—É—Å–∫ –∫–ª–∏–µ–Ω—Ç–∞"""
        await self.initialize()
        
        if not await self.setup_bot():
            return
        
        await self.download_gif()
        await self.load_all_modules()
        await self.register_handlers()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        with open(TOKEN_FILE, 'r') as f:
            _, _, token = f.read().strip().split(':', 2)
        
        self.bot_client = TelegramClient(f'acroka_bot_{self.me.id}', self.api_id, self.api_hash)
        await self.bot_client.start(bot_token=token)
        
        @self.bot_client.on(events.NewMessage(pattern='/start'))
        async def start_handler(event):
            await self.bot_client.send_file(
                event.chat_id,
                GIF_FILENAME,
                caption=(
                    'üëã –ü—Ä–∏–≤–µ—Ç! –Ø - Acroka - userbot!\n'
                    'üìÖ –î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ –∏—Å–ø–æ–ª—å–∑—É–π .info.\n\n'
                    'üí¨ –ï—Å–ª–∏ —Ç–µ–±–µ –Ω—É–∂–Ω–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∞, –ø–∏—à–∏: [–ê–∫—Ä–æ–∫–∞ –°–∞–ø–ø–æ—Ä—Ç](https://t.me/acroka_support)'
                ),
                parse_mode='markdown'
            )
        
        print(pyfiglet.figlet_format("Acroka"))
        print("–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
        
        await asyncio.gather(
            self.client.run_until_disconnected(),
            self.bot_client.run_until_disconnected()
        )

if __name__ == '__main__':
    # –ü–æ–ª—É—á–∞–µ–º API_ID –∏ API_HASH –∏–∑ config.py –∏–ª–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    try:
        from config import API_ID, API_HASH
    except ImportError:
        API_ID = os.getenv('API_ID')
        API_HASH = os.getenv('API_HASH')
    
    if not API_ID or not API_HASH:
        print("–û—à–∏–±–∫–∞: –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å API_ID –∏ API_HASH –≤ config.py –∏–ª–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        sys.exit(1)
    
    client = AcrokaClient(API_ID, API_HASH)
    asyncio.run(client.run())