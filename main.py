import asyncio
import os
import re
import random
import string
from pathlib import Path
from typing import Optional, Tuple, List
import subprocess 
import aiohttp
from telethon import TelegramClient, events
from telethon.errors import FloodWaitError, RPCError
from config import API_ID, API_HASH
import platform

class BotManager:
    def __init__(self):
        # üìÇ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—É—Ç–µ–π
        self.BASE_DIR = Path(__file__).parent.resolve()
        self.SOURCE_DIR = self.BASE_DIR / 'source'
        self.SOURCE_DIR.mkdir(exist_ok=True)
        
        # üîë –§–∞–π–ª—ã –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        self.BOT_TOKEN_FILE = self.SOURCE_DIR / 'bottoken.txt'
        self.BOT_IMAGE = self.SOURCE_DIR / 'bot_avatar.png'
        self.PREFIX_FILE = self.SOURCE_DIR / 'prefix.txt'
        self.DEFAULT_PREFIX = '.'
        
        # üß© –ü–∞–ø–∫–∞ –¥–ª—è –º–æ–¥—É–ª–µ–π
        self.MODS_DIR = self.SOURCE_DIR / 'mods'
        self.MODS_DIR.mkdir(exist_ok=True)
        
        # ‚ö° –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞
        try:
            self.client = TelegramClient(
                session=f'acroka_session_{API_ID}',
                api_id=API_ID,
                api_hash=API_HASH,
                device_model="Bot Manager",
                system_version="1.0",
                app_version="2.0"
            )
        except Exception as e:
            raise RuntimeError(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞: {e}")
            
    async def sleep(self, delay: float = 1.0) -> None:
        """‚è≥ –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –∏—Å–∫–ª—é—á–µ–Ω–∏–π"""
        try:
            await asyncio.sleep(delay)
        except asyncio.CancelledError:
            raise
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–¥–µ—Ä–∂–∫–µ: {e}")

    def get_prefix(self) -> str:
        """üî§ –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–µ—Ñ–∏–∫—Å–∞ –∫–æ–º–∞–Ω–¥"""
        try:
            if self.PREFIX_FILE.exists():
                prefix = self.PREFIX_FILE.read_text().strip()
                return prefix if len(prefix) == 1 else self.DEFAULT_PREFIX
            return self.DEFAULT_PREFIX
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –ø—Ä–µ—Ñ–∏–∫—Å–∞: {e}")
            return self.DEFAULT_PREFIX

    async def create_new_bot(self) -> Tuple[Optional[str], Optional[str], Optional[str]]:
        """ü§ñ –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –±–æ—Ç–∞ —á–µ—Ä–µ–∑ BotFather"""
        print("\nüõ†Ô∏è –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å —Å–æ–∑–¥–∞–Ω–∏—è –±–æ—Ç–∞...")
        
        async def botfather_step(conv, message: str, expected: str = None) -> Optional[str]:
            """üîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ —à–∞–≥–∞ –¥–∏–∞–ª–æ–≥–∞ —Å BotFather"""
            try:
                await conv.send_message(message)
                await self.sleep(2.5)  # –û–ø—Ç–∏–º–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
                response = await conv.get_response()
                
                if expected and expected.lower() not in response.text.lower():
                    print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç: {response.text[:50]}...")
                    return None
                return response.text
            except FloodWaitError as e:
                print(f"‚è≥ –û–∂–∏–¥–∞–µ–º {e.seconds} —Å–µ–∫. –∏–∑-–∑–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π...")
                await asyncio.sleep(e.seconds + 2)
                return None
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –≤ –¥–∏–∞–ª–æ–≥–µ: {e}")
                return None

        try:
            async with self.client.conversation('BotFather', timeout=60) as conv:
                # 1. –ò–Ω–∏—Ü–∏–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ
                if not await botfather_step(conv, '/newbot', "Alright"):
                    return None, None, None

                # 2. –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–º—è
                if not await botfather_step(conv, 'Acroka Helper Bot'):
                    return None, None, None

                # 3. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º username
                username = self._generate_username()
                response = await botfather_step(conv, username, "Done!")
                if not response:
                    return None, None, None

                # üîç –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–æ–∫–µ–Ω
                if match := re.search(r'(\d+:[a-zA-Z0-9_-]{35})', response):
                    token = match.group(1)
                    user_id = token.split(':')[0]
                    
                    # üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
                    self._save_bot_data(username, user_id, token)
                    
                    # üñºÔ∏è –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–≤–∞—Ç–∞—Ä
                    await self._set_bot_avatar(username)
                    
                    print(f"\n‚úÖ –ë–æ—Ç @{username} —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!")
                    return username, user_id, token

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±–æ—Ç–∞: {e}")
        return None, None, None

    def _generate_username(self) -> str:
        """üé≤ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ username"""
        suffix = ''.join(random.choices(string.ascii_lowercase + string.digits, k=10))
        return f'acroka_{suffix}_bot'

    def _save_bot_data(self, username: str, user_id: str, token: str) -> bool:
        """üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –±–æ—Ç–∞"""
        try:
            data = f"{username}:{user_id}:{token}"
            self.BOT_TOKEN_FILE.write_text(data)
            return True
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞: {e}")
            return False

    async def _set_bot_avatar(self, username: str) -> bool:
        """üñºÔ∏è –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞–≤–∞—Ç–∞—Ä–∞ –±–æ—Ç–∞"""
        if not self.BOT_IMAGE.exists():
            print(f"‚ö†Ô∏è –§–∞–π–ª –∞–≤–∞—Ç–∞—Ä–∞ {self.BOT_IMAGE.name} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return False

        try:
            async with self.client.conversation('BotFather', timeout=60) as conv:
                steps = [
                    ('/setuserpic', None),
                    (f'@{username}', None),
                    (self.BOT_IMAGE, None)
                ]
                
                for msg, _ in steps:
                    if isinstance(msg, str):
                        await conv.send_message(msg)
                    else:
                        await conv.send_file(msg)
                    await self.sleep(2)
                    await conv.get_response()

                print("üñºÔ∏è –ê–≤–∞—Ç–∞—Ä —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
                return True
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∞–≤–∞—Ç–∞—Ä–∞: {e}")
            return False

    async def load_existing_bot(self, username: str) -> Tuple[Optional[str], Optional[str]]:
        """üîç –ó–∞–≥—Ä—É–∑–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –±–æ—Ç–∞"""
        print(f"\nüîé –ò—â–µ–º –±–æ—Ç–∞ @{username}...")
        
        try:
            async with self.client.conversation('BotFather', timeout=60) as conv:
                await conv.send_message('/token')
                await self.sleep(2)
                await conv.get_response()
                
                await conv.send_message(f'@{username}')
                await self.sleep(2)
                response = await conv.get_response()

                if match := re.search(r'(\d+:[a-zA-Z0-9_-]{35})', response.text):
                    token = match.group(1)
                    user_id = token.split(':')[0]
                    
                    if self._save_bot_data(username, user_id, token):
                        await self._set_bot_avatar(username)
                        print(f"\n‚úÖ –ë–æ—Ç @{username} –∑–∞–≥—Ä—É–∂–µ–Ω!")
                        return username, token

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –±–æ—Ç–∞: {e}")
        return None, None

    async def check_bot_token(self, token: str) -> bool:
        """üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ —Ç–æ–∫–µ–Ω–∞"""
        url = f'https://api.telegram.org/bot{token}/getMe'
        
        try:
            async with aiohttp.ClientSession(
                timeout=aiohttp.ClientTimeout(total=15)
            ) as session:
                async with session.get(url) as resp:
                    data = await resp.json()
                    return data.get('ok', False) and resp.status == 200
                    
        except asyncio.TimeoutError:
            print("‚ö†Ô∏è –¢–∞–π–º–∞—É—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–æ–∫–µ–Ω–∞")
            return False
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–æ–∫–µ–Ω–∞: {e}")
            return False

    async def check_internet_connection(self) -> bool:
        try:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—É—é —Å–∏—Å—Ç–µ–º—É
            param = '-n' if platform.system().lower() == 'windows' else '-c'
            # –í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—É ping –Ω–∞ Google DNS
            output = subprocess.check_output(['ping', param, '1', '8.8.8.8'], stderr=subprocess.DEVNULL)
            return True
        except subprocess.CalledProcessError:
            return False

async def run(self) -> None:
    """üöÄ –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª —Ä–∞–±–æ—Ç—ã"""
    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        if not await self.check_internet_connection():
            print("‚ö†Ô∏è [–û—à–∏–±–∫–∞] –ù–µ—Ç –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–∞—à–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ.")
            return

        # üîë –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Telegram
        await self.client.start()
        me = await self.client.get_me()
        print(f"\nüë§ –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –∫–∞–∫: {me.first_name} (ID: {me.id})")

        # ü§ñ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
        if not self.BOT_TOKEN_FILE.exists() or not self.BOT_TOKEN_FILE.stat().st_size:
            choice = input("\nüìù –§–∞–π–ª —Ç–æ–∫–µ–Ω–∞ –ø—É—Å—Ç. –ó–∞–≥—Ä—É–∑–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –±–æ—Ç–∞? (–¥–∞/–Ω–µ—Ç): ").lower()
            
            if choice in ('y', 'yes', '–¥–∞', '–¥'):
                username = input("–í–≤–µ–¥–∏—Ç–µ @username –±–æ—Ç–∞: ").strip()
                if username.startswith('@'):
                    username = username[1:]
                    
                if not username:
                    print("üõë –ù–µ —É–∫–∞–∑–∞–Ω–æ –∏–º—è –±–æ—Ç–∞")
                    return
                    
                result = await self.load_existing_bot(username)
                if not result:
                    print("üõë –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –±–æ—Ç–∞")
                    return
            else:
                result = await self.create_new_bot()
                if not result:
                    print("üõë –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –±–æ—Ç–∞")
                    return
        else:
            try:
                content = self.BOT_TOKEN_FILE.read_text().strip()
                if content.count(':') >= 2:
                    parts = content.split(':')
                    token = ':'.join(parts[2:])
                    
                    if not await self.check_bot_token(token):
                        print("‚ùå –¢–æ–∫–µ–Ω –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω")
                        return
                else:
                    print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–æ–∫–µ–Ω–∞")
                    return
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞: {e}")
                return

        # üß© –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥—É–ª–µ–π
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –º–æ–¥—É–ª–µ–π
            if not any(self.MODS_DIR.iterdir()):
                print("\n‚ÑπÔ∏è –ü–∞–ø–∫–∞ —Å –º–æ–¥—É–ª—è–º–∏ –ø—É—Å—Ç–∞. –í—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –º–æ–¥—É–ª–∏ –≤—Ä—É—á–Ω—É—é –≤ source/mods/")
                print("‚ÑπÔ∏è –ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã .dlm –∏–ª–∏ .lm –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥—É–ª–µ–π")
            else:
                from modules import main as modules_main
                await modules_main(self.client)
                print("\nüîå –ú–æ–¥—É–ª–∏ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
        except ImportError as e:
            print(f"\n‚ö†Ô∏è –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª–µ–π: {e}")
        except Exception as e:
            print(f"\n‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥—É–ª–µ–π: {e}")
            import traceback
            traceback.print_exc()

    except KeyboardInterrupt:
        print("\nüõë –†–∞–±–æ—Ç–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
    except Exception as e:
        print(f"\nüõë –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
    finally:
        if self.client.is_connected():
            await self.client.disconnect()
            print("\nüîå –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ")
            
if __name__ == '__main__':
    print("\n" + "="*50)
    print("ü§ñ Acroka Bot Manager".center(50))
    print("="*50 + "\n")
    
    try:
        manager = BotManager()
        asyncio.run(manager.run())
    except KeyboardInterrupt:
        print("\nüõë –°–∫—Ä–∏–ø—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    except Exception as e:
        print(f"\nüí• –§–∞—Ç–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
    finally:
        print("\nüèÅ –†–∞–±–æ—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞\n")
