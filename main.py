import asyncio
import aiohttp
from telethon import TelegramClient
from config import API_ID, API_HASH
from modules import register_event_handlers, generate_username, run_bot
import os
import re

BASE_DIR = os.path.dirname(os.path.abspath(__file__))
BOT_TOKEN_FILE = os.path.join(BASE_DIR, 'source', 'bottoken.txt')
BOT_IMAGE = os.path.join(BASE_DIR, 'source', 'pic.png')

client = TelegramClient('acroka_user_session', API_ID, API_HASH)

async def sleep(delay=1):
    """–ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏"""
    await asyncio.sleep(delay)

async def create_new_bot():
    """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –±–æ—Ç–∞ —á–µ—Ä–µ–∑ BotFather"""
    print("üõ†Ô∏è –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –±–æ—Ç–∞...")
    try:
        async with client.conversation('BotFather') as conv:
            # –®–∞–≥ 1: –ò–Ω–∏—Ü–∏–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –±–æ—Ç–∞
            await conv.send_message('/newbot')
            await sleep()
            response = await conv.get_response()
            
            if "Alright" not in response.text:
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—á–∞—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –±–æ—Ç–∞")
                print(f"–û—Ç–≤–µ—Ç BotFather: {response.text}")
                return None, None, None

            # –®–∞–≥ 2: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–º—è –±–æ—Ç–∞
            await conv.send_message('Acroka Helper Bot')
            await sleep()
            await conv.get_response()

            # –®–∞–≥ 3: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —é–∑–µ—Ä–Ω–µ–π–º
            username = generate_username()
            await conv.send_message(username)
            await sleep()
            response = await conv.get_response()

            if "Done!" not in response.text:
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –±–æ—Ç–∞")
                print(f"–û—Ç–≤–µ—Ç BotFather: {response.text}")
                return None, None, None

            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –æ—Ç–≤–µ—Ç–∞
            token = None
            # –í–∞—Ä–∏–∞–Ω—Ç 1: –¢–æ–∫–µ–Ω –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω–æ–π —Å—Ç—Ä–æ–∫–µ –ø–æ—Å–ª–µ "Use this token"
            if "Use this token" in response.text:
                token_match = re.search(r'(\d+:[a-zA-Z0-9_-]+)', response.text)
                if token_match:
                    token = token_match.group(1)
                else:
                    # –ï—Å–ª–∏ —Ç–æ–∫–µ–Ω –≤ —Å–ª–µ–¥—É—é—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
                    await sleep()
                    token_msg = await conv.get_response()
                    token_match = re.search(r'(\d+:[a-zA-Z0-9_-]+)', token_msg.text)
                    if token_match:
                        token = token_match.group(1)
            
            # –í–∞—Ä–∏–∞–Ω—Ç 2: –ü—Ä–æ—Å—Ç–æ –∏—â–µ–º —Å—Ç—Ä–æ–∫—É —Å —Ñ–æ—Ä–º–∞—Ç–æ–º —Ç–æ–∫–µ–Ω–∞
            if not token:
                for line in response.text.split('\n'):
                    if re.match(r'^\d+:[a-zA-Z0-9_-]+$', line.strip()):
                        token = line.strip()
                        break

            if not token:
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —Ç–æ–∫–µ–Ω")
                print(f"–û—Ç–≤–µ—Ç BotFather: {response.text}")
                return None, None, None

            # –û—á–∏—â–∞–µ–º —Ç–æ–∫–µ–Ω –æ—Ç –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤
            token = re.sub(r'[`"\']', '', token).strip()
            user_id = token.split(':')[0]

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –±–æ—Ç–∞
            with open(BOT_TOKEN_FILE, 'w') as f:
                f.write(f"{username}:{user_id}:{token}")

            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–≤–∞—Ç–∞—Ä–∫—É
            await set_bot_photo(username)
            
            print(f"‚úÖ –ë–æ—Ç @{username} —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!")
            return username, user_id, token

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –±–æ—Ç–∞: {e}")
        return None, None, None

async def set_bot_photo(username):
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞–≤–∞—Ç–∞—Ä–∫–∏ –¥–ª—è –±–æ—Ç–∞"""
    if os.path.exists(BOT_IMAGE):
        try:
            async with client.conversation('BotFather') as conv:
                await conv.send_message('/setuserpic')
                await sleep()
                await conv.get_response()
                
                await conv.send_message(f'@{username}')
                await sleep()
                await conv.get_response()
                
                await conv.send_file(BOT_IMAGE)
                await sleep()
                await conv.get_response()
                print("üñºÔ∏è –ê–≤–∞—Ç–∞—Ä–∫–∞ –±–æ—Ç–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!")
        except Exception as e:
            print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∞–≤–∞—Ç–∞—Ä–∫—É: {e}")
    else:
        print(f"‚ö†Ô∏è –§–∞–π–ª –∞–≤–∞—Ç–∞—Ä–∫–∏ {BOT_IMAGE} –Ω–µ –Ω–∞–π–¥–µ–Ω")

async def load_existing_bot(username):
    """–ó–∞–≥—Ä—É–∑–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –±–æ—Ç–∞"""
    print(f"üîç –ó–∞–≥—Ä—É–∑–∫–∞ –±–æ—Ç–∞ @{username}...")
    try:
        async with client.conversation('BotFather') as conv:
            # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ç–æ–∫–µ–Ω
            await conv.send_message('/token')
            await sleep()
            await conv.get_response()
            
            # –£–∫–∞–∑—ã–≤–∞–µ–º —é–∑–µ—Ä–Ω–µ–π–º –±–æ—Ç–∞
            await conv.send_message(f'@{username}')
            await sleep()
            response = await conv.get_response()

            # –ò—â–µ–º —Ç–æ–∫–µ–Ω –≤ –æ—Ç–≤–µ—Ç–µ
            token = None
            # –í–∞—Ä–∏–∞–Ω—Ç 1: –¢–æ–∫–µ–Ω –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω–æ–π —Å—Ç—Ä–æ–∫–µ –ø–æ—Å–ª–µ "You can use this token"
            if "You can use this token" in response.text:
                token_match = re.search(r'(\d+:[a-zA-Z0-9_-]+)', response.text)
                if token_match:
                    token = token_match.group(1)
                else:
                    # –ï—Å–ª–∏ —Ç–æ–∫–µ–Ω –≤ —Å–ª–µ–¥—É—é—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
                    await sleep()
                    token_msg = await conv.get_response()
                    token_match = re.search(r'(\d+:[a-zA-Z0-9_-]+)', token_msg.text)
                    if token_match:
                        token = token_match.group(1)
            
            # –í–∞—Ä–∏–∞–Ω—Ç 2: –ü—Ä–æ—Å—Ç–æ –∏—â–µ–º —Å—Ç—Ä–æ–∫—É —Å —Ñ–æ—Ä–º–∞—Ç–æ–º —Ç–æ–∫–µ–Ω–∞
            if not token:
                for line in response.text.split('\n'):
                    if re.match(r'^\d+:[a-zA-Z0-9_-]+$', line.strip()):
                        token = line.strip()
                        break

            if not token:
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω")
                print(f"–û—Ç–≤–µ—Ç BotFather: {response.text}")
                return None, None

            # –û—á–∏—â–∞–µ–º —Ç–æ–∫–µ–Ω –æ—Ç –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤
            token = re.sub(r'[`"\']', '', token).strip()
            user_id = token.split(':')[0]

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω
            with open(BOT_TOKEN_FILE, 'w') as f:
                f.write(f"{username}:{user_id}:{token}")

            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–≤–∞—Ç–∞—Ä–∫—É
            await set_bot_photo(username)
            
            print(f"‚úÖ –ë–æ—Ç @{username} —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω!")
            return username, token

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –±–æ—Ç–∞: {e}")
        return None, None

async def check_bot_token(token):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ —Ç–æ–∫–µ–Ω–∞ –±–æ—Ç–∞"""
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(f'https://api.telegram.org/bot{token}/getMe') as resp:
                data = await resp.json()
                return resp.status == 200 and data.get('ok', False)
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–æ–∫–µ–Ω–∞: {e}")
        return False

async def main():
    try:
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ Telegram
        await client.start()
        me = await client.get_me()
        print(f"üîë –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –∫–∞–∫: {me.first_name}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–∞ —Å —Ç–æ–∫–µ–Ω–æ–º
        if not os.path.exists(BOT_TOKEN_FILE) or os.stat(BOT_TOKEN_FILE).st_size == 0:
            choice = input("–§–∞–π–ª —Ç–æ–∫–µ–Ω–∞ –ø—É—Å—Ç. –ó–∞–≥—Ä—É–∑–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –±–æ—Ç–∞? (–¥–∞/–Ω–µ—Ç): ").strip().lower()
            
            if choice == '–¥–∞':
                username = input("–í–≤–µ–¥–∏—Ç–µ —é–∑–µ—Ä–Ω–µ–π–º –±–æ—Ç–∞ (–±–µ–∑ @): ").strip()
                result = await load_existing_bot(username)
                
                if not result or len(result) != 2:
                    print("üõë –ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –±–µ–∑ —Ç–æ–∫–µ–Ω–∞ –±–æ—Ç–∞")
                    return
                username, token = result
            else:
                result = await create_new_bot()
                if not result or len(result) != 3:
                    print("üõë –ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –±–µ–∑ —Ç–æ–∫–µ–Ω–∞ –±–æ—Ç–∞")
                    return
                username, user_id, token = result
        else:
            # –ß–∏—Ç–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ç–æ–∫–µ–Ω
            try:
                with open(BOT_TOKEN_FILE, 'r') as f:
                    data = f.read().strip().split(':')
                    if len(data) == 3:
                        username, user_id, token = data
                    else:
                        print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞ —Ç–æ–∫–µ–Ω–∞ (–æ–∂–∏–¥–∞–µ—Ç—Å—è username:user_id:token)")
                        return

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω
                if not await check_bot_token(token):
                    print("‚ùå –ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω –±–æ—Ç–∞")
                    return
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞ —Ç–æ–∫–µ–Ω–∞: {e}")
                return

        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞
        register_event_handlers(client)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        bot_task = asyncio.create_task(run_bot(token))
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        try:
            await client.send_message(f'@{username}', '/start')
        except Exception as e:
            print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
        
        # –û–∂–∏–¥–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        await bot_task

    except Exception as e:
        print(f"üõë –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
    finally:
        if client.is_connected():  # –£–±—Ä–∞–ª–∏ await, —Ç–∞–∫ –∫–∞–∫ is_connected() –Ω–µ –∫–æ—Ä—É—Ç–∏–Ω–∞
            await client.disconnect()
            
if __name__ == '__main__':
    asyncio.run(main())
