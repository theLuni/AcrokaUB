import asyncio
import os
import re
import aiohttp
from telethon import TelegramClient, events
from config import API_ID, API_HASH

class BotManager:
    def __init__(self):
        self.BASE_DIR = os.path.dirname(os.path.abspath(__file__))
        self.BOT_TOKEN_FILE = os.path.join(self.BASE_DIR, 'source', 'bottoken.txt')
        self.BOT_IMAGE = os.path.join(self.BASE_DIR, 'source', 'pic.png')
        self.PREFIX_FILE = os.path.join(self.BASE_DIR, 'source', 'prefix.txt')
        self.DEFAULT_PREFIX = '.'
        self.client = TelegramClient(f'acroka_session_{API_ID}', API_ID, API_HASH)

    async def sleep(self, delay=1):
        await asyncio.sleep(delay)

    def get_prefix(self):
        if os.path.exists(self.PREFIX_FILE):
            with open(self.PREFIX_FILE, 'r') as f:
                prefix = f.read().strip()
                return prefix if len(prefix) == 1 else self.DEFAULT_PREFIX
        return self.DEFAULT_PREFIX

    async def create_new_bot(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –±–æ—Ç–∞ —á–µ—Ä–µ–∑ BotFather"""
        print("üõ†Ô∏è –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –±–æ—Ç–∞...")
        try:
            async with self.client.conversation('BotFather') as conv:
                await conv.send_message('/newbot')
                await self.sleep()
                
                response = await conv.get_response()
                if "Alright" not in response.text:
                    print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—á–∞—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –±–æ—Ç–∞")
                    return None, None, None

                await conv.send_message('Acroka Helper Bot')
                await self.sleep()
                await conv.get_response()

                username = self.generate_username()
                await conv.send_message(username)
                await self.sleep()
                response = await conv.get_response()

                if "Done!" not in response.text:
                    print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –±–æ—Ç–∞")
                    return None, None, None

                if match := re.search(r'(\d+:[a-zA-Z0-9_-]+)', response.text):
                    token = match.group(1)
                    user_id = token.split(':')[0]
                    with open(self.BOT_TOKEN_FILE, 'w') as f:
                        f.write(f"{username}:{user_id}:{token}")

                    await self.set_bot_photo(username)
                    print(f"‚úÖ –ë–æ—Ç @{username} —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!")
                    return username, user_id, token

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –±–æ—Ç–∞: {e}")
        return None, None, None

    def generate_username(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ –∏–º–µ–Ω–∏ –±–æ—Ç–∞"""
        import random
        import string
        chars = string.ascii_lowercase + string.digits
        rand_part = ''.join(random.choice(chars) for _ in range(6)
        return f'acroka_{rand_part}_bot'

    async def set_bot_photo(self, username):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞–≤–∞—Ç–∞—Ä–∫–∏ –¥–ª—è –±–æ—Ç–∞"""
        if not os.path.exists(self.BOT_IMAGE):
            print(f"‚ö†Ô∏è –§–∞–π–ª –∞–≤–∞—Ç–∞—Ä–∫–∏ {self.BOT_IMAGE} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return

        try:
            async with self.client.conversation('BotFather') as conv:
                await conv.send_message('/setuserpic')
                await self.sleep()
                await conv.get_response()
                
                await conv.send_message(f'@{username}')
                await self.sleep()
                await conv.get_response()
                
                await conv.send_file(self.BOT_IMAGE)
                await self.sleep()
                await conv.get_response()
                print("üñºÔ∏è –ê–≤–∞—Ç–∞—Ä–∫–∞ –±–æ—Ç–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!")
        except Exception as e:
            print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∞–≤–∞—Ç–∞—Ä–∫—É: {e}")

    async def load_existing_bot(self, username):
        """–ó–∞–≥—Ä—É–∑–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –±–æ—Ç–∞"""
        print(f"üîç –ó–∞–≥—Ä—É–∑–∫–∞ –±–æ—Ç–∞ @{username}...")
        try:
            async with self.client.conversation('BotFather') as conv:
                await conv.send_message('/token')
                await self.sleep()
                await conv.get_response()
                
                await conv.send_message(f'@{username}')
                await self.sleep()
                response = await conv.get_response()

                if match := re.search(r'(\d+:[a-zA-Z0-9_-]+)', response.text):
                    token = match.group(1)
                    user_id = token.split(':')[0]
                    with open(self.BOT_TOKEN_FILE, 'w') as f:
                        f.write(f"{username}:{user_id}:{token}")

                    await self.set_bot_photo(username)
                    print(f"‚úÖ –ë–æ—Ç @{username} —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω!")
                    return username, token

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –±–æ—Ç–∞: {e}")
        return None, None

    async def check_bot_token(self, token):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ —Ç–æ–∫–µ–Ω–∞ –±–æ—Ç–∞"""
        try:
            async with aiohttp.ClientSession() as session:
                async with session.get(f'https://api.telegram.org/bot{token}/getMe') as resp:
                    data = await resp.json()
                    return resp.status == 200 and data.get('ok', False)
        except Exception:
            return False

    async def run(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞"""
        try:
            await self.client.start()
            print(f"üîë –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –∫–∞–∫: {(await self.client.get_me()).first_name}")

            if not os.path.exists(self.BOT_TOKEN_FILE) or os.stat(self.BOT_TOKEN_FILE).st_size == 0:
                choice = input("–§–∞–π–ª —Ç–æ–∫–µ–Ω–∞ –ø—É—Å—Ç. –ó–∞–≥—Ä—É–∑–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –±–æ—Ç–∞? (–¥–∞/–Ω–µ—Ç): ").strip().lower()
                
                if choice == '–¥–∞':
                    username = input("–í–≤–µ–¥–∏—Ç–µ —é–∑–µ—Ä–Ω–µ–π–º –±–æ—Ç–∞ (–±–µ–∑ @): ").strip()
                    result = await self.load_existing_bot(username)
                    
                    if not result:
                        print("üõë –ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –±–µ–∑ —Ç–æ–∫–µ–Ω–∞ –±–æ—Ç–∞")
                        return
                    username, token = result
                else:
                    result = await self.create_new_bot()
                    if not result:
                        print("üõë –ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –±–µ–∑ —Ç–æ–∫–µ–Ω–∞ –±–æ—Ç–∞")
                        return
                    username, user_id, token = result
            else:
                with open(self.BOT_TOKEN_FILE, 'r') as f:
                    content = f.read().strip()
                    if content.count(':') >= 2:
                        parts = content.split(':')
                        username = parts[0]
                        user_id = parts[1]
                        token = ':'.join(parts[2:])
                    else:
                        print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞ —Ç–æ–∫–µ–Ω–∞")
                        return

                if not await self.check_bot_token(token):
                    print("‚ùå –ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω –±–æ—Ç–∞")
                    return

            # –ó–∞–ø—É—Å–∫ modules.py —Å –ø–µ—Ä–µ–¥–∞—á–µ–π –∫–ª–∏–µ–Ω—Ç–∞
            from modules import main as modules_main
            await modules_main(self.client)

        except Exception as e:
            print(f"üõë –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        finally:
            if self.client.is_connected():
                await self.client.disconnect()

if __name__ == '__main__':
    bot = BotManager()
    asyncio.run(bot.run())
