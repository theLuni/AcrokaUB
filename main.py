import asyncio
import aiohttp
from telethon import TelegramClient, events
from config import API_ID, API_HASH
from modules import register_event_handlers, generate_username, run_bot
import os
import re

BASE_DIR = os.path.dirname(os.path.abspath(__file__))
BOT_TOKEN_FILE = os.path.join(BASE_DIR, 'source', 'bottoken.txt')
BOT_IMAGE = os.path.join(BASE_DIR, 'source', 'pic.png')
# –î–æ–±–∞–≤—å—Ç–µ –≤ –Ω–∞—á–∞–ª–æ —Ñ–∞–π–ª–∞
PREFIX_FILE = os.path.join(BASE_DIR, 'source', 'prefix.txt')
DEFAULT_PREFIX = '.'


client = TelegramClient('acroka_user_session_{API_ID}', API_ID, API_HASH)

async def sleep(delay=1):
    """–ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏"""
    await asyncio.sleep(delay)

def get_prefix():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –ø—Ä–µ—Ñ–∏–∫—Å–∞ –∫–æ–º–∞–Ω–¥"""
    if os.path.exists(PREFIX_FILE):
        with open(PREFIX_FILE, 'r') as f:
            prefix = f.read().strip()
            return prefix if len(prefix) == 1 else DEFAULT_PREFIX
    return DEFAULT_PREFIX

async def create_new_bot():
    """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –±–æ—Ç–∞ —á–µ—Ä–µ–∑ BotFather"""
    print("üõ†Ô∏è –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –±–æ—Ç–∞...")
    try:
        async with client.conversation('BotFather', exclusive=False) as conv:
            await conv.send_message('/newbot')
            await sleep()
            response = await conv.get_response()
            
            if "Alright" not in response.text:
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—á–∞—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –±–æ—Ç–∞")
                return None, None, None

            await conv.send_message('Acroka Helper Bot')
            await sleep()
            await conv.get_response()

            username = generate_username()
            await conv.send_message(username)
            await sleep()
            response = await conv.get_response()

            if "Done!" not in response.text:
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –±–æ—Ç–∞")
                return None, None, None

            token_match = re.search(r'(\d+:[a-zA-Z0-9_-]+)', response.text)
            if not token_match:
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —Ç–æ–∫–µ–Ω")
                return None, None, None

            token = token_match.group(1)
            user_id = token.split(':')[0]

            with open(BOT_TOKEN_FILE, 'w') as f:
                f.write(f"{username}:{user_id}:{token}")

            await set_bot_photo(username)
            
            print(f"‚úÖ –ë–æ—Ç @{username} —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!")
            return username, user_id, token

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –±–æ—Ç–∞: {e}")
        return None, None, None

async def set_bot_photo(username):
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞–≤–∞—Ç–∞—Ä–∫–∏ –¥–ª—è –±–æ—Ç–∞"""
    if os.path.exists(BOT_IMAGE):
        try:
            async with client.conversation('BotFather', exclusive=True) as conv:
                await conv.send_message('/setuserpic')
                await sleep()
                await conv.get_response()
                
                await conv.send_message(f'@{username}')
                await sleep()
                await conv.get_response()
                
                await conv.send_file(BOT_IMAGE)
                await sleep()
                await conv.get_response()
                print("üñºÔ∏è –ê–≤–∞—Ç–∞—Ä–∫–∞ –±–æ—Ç–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!")
        except Exception as e:
            print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∞–≤–∞—Ç–∞—Ä–∫—É: {e}")
    else:
        print(f"‚ö†Ô∏è –§–∞–π–ª –∞–≤–∞—Ç–∞—Ä–∫–∏ {BOT_IMAGE} –Ω–µ –Ω–∞–π–¥–µ–Ω")

async def load_existing_bot(username):
    """–ó–∞–≥—Ä—É–∑–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –±–æ—Ç–∞"""
    print(f"üîç –ó–∞–≥—Ä—É–∑–∫–∞ –±–æ—Ç–∞ @{username}...")
    try:
        async with client.conversation('BotFather', exclusive=False) as conv:
            await conv.send_message('/token')
            await sleep()
            await conv.get_response()
            
            await conv.send_message(f'@{username}')
            await sleep()
            response = await conv.get_response()

            token_match = re.search(r'(\d+:[a-zA-Z0-9_-]+)', response.text)
            if not token_match:
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω")
                return None, None

            token = token_match.group(1)
            user_id = token.split(':')[0]

            with open(BOT_TOKEN_FILE, 'w') as f:
                f.write(f"{username}:{user_id}:{token}")

            await set_bot_photo(username)
            
            print(f"‚úÖ –ë–æ—Ç @{username} —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω!")
            return username, token

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –±–æ—Ç–∞: {e}")
        return None, None

async def check_bot_token(token):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ —Ç–æ–∫–µ–Ω–∞ –±–æ—Ç–∞"""
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(f'https://api.telegram.org/bot{token}/getMe') as resp:
                data = await resp.json()
                return resp.status == 200 and data.get('ok', False)
    except Exception:
        return False

async def main():
    try:
        await client.start()
        print(f"üîë –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –∫–∞–∫: {(await client.get_me()).first_name}")

        if not os.path.exists(BOT_TOKEN_FILE) or os.stat(BOT_TOKEN_FILE).st_size == 0:
            choice = input("–§–∞–π–ª —Ç–æ–∫–µ–Ω–∞ –ø—É—Å—Ç. –ó–∞–≥—Ä—É–∑–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –±–æ—Ç–∞? (–¥–∞/–Ω–µ—Ç): ").strip().lower()
            
            if choice == '–¥–∞':
                username = input("–í–≤–µ–¥–∏—Ç–µ —é–∑–µ—Ä–Ω–µ–π–º –±–æ—Ç–∞ (–±–µ–∑ @): ").strip()
                result = await load_existing_bot(username)
                
                if not result:
                    print("üõë –ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –±–µ–∑ —Ç–æ–∫–µ–Ω–∞ –±–æ—Ç–∞")
                    return
                username, token = result
            else:
                result = await create_new_bot()
                if not result:
                    print("üõë –ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –±–µ–∑ —Ç–æ–∫–µ–Ω–∞ –±–æ—Ç–∞")
                    return
                username, user_id, token = result
        else:
            with open(BOT_TOKEN_FILE, 'r') as f:
                data = f.read().strip().split(':')
                if len(data) == 3:
                    username, user_id, token = data
                else:
                    print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞ —Ç–æ–∫–µ–Ω–∞")
                    return

            if not await check_bot_token(token):
                print("‚ùå –ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω –±–æ—Ç–∞")
                return

        register_event_handlers(client, get_prefix())
        bot_task = asyncio.create_task(run_bot(token))
        
        await client.send_message(f'@{username}', '/start')
        await bot_task

    except Exception as e:
        print(f"üõë –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
    finally:
        if client.is_connected():
            await client.disconnect()

if __name__ == '__main__':
    asyncio.run(main())
