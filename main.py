import asyncio
import re
import random
import string
from pathlib import Path
from typing import Optional, Tuple
import getpass

import aiohttp
from telethon import TelegramClient, errors
from telethon.errors import FloodWaitError, RPCError
from config import API_ID, API_HASH


class BotManager:
    def __init__(self):
        self.BASE_DIR = Path(__file__).parent.resolve()
        self.SOURCE_DIR = self.BASE_DIR / 'source'
        self.SOURCE_DIR.mkdir(exist_ok=True)
        
        self.BOT_TOKEN_FILE = self.SOURCE_DIR / 'bottoken.txt'
        self.BOT_IMAGE = self.SOURCE_DIR / 'pic.png'
        self.PREFIX_FILE = self.SOURCE_DIR / 'prefix.txt'
        self.DEFAULT_PREFIX = '.'
        
        self.client = TelegramClient(f'acroka_session_{API_ID}', API_ID, API_HASH)
        self.client.parse_mode = 'html'

    async def async_input(self, prompt: str = "") -> str:
        print(prompt, end="", flush=True)
        return (await asyncio.get_event_loop().run_in_executor(None, lambda: input())).strip()

    async def ensure_connection(self):
        """–ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ"""
        if not self.client.is_connected():
            await self.client.connect()

    async def create_new_bot(self) -> Tuple[Optional[str], Optional[str], Optional[str]]:
        await self.ensure_connection()
        
        async with self.client.conversation('BotFather', timeout=30) as conv:
            try:
                await conv.send_message('/newbot')
                await asyncio.sleep(2)
                response = await conv.get_response()
                
                if "Alright" not in response.text:
                    return None, None, None

                await conv.send_message('Acroka Helper Bot')
                await asyncio.sleep(2)
                await conv.get_response()

                username = f'acroka_{"".join(random.choices(string.ascii_lowercase + string.digits, k=8))}_bot'
                await conv.send_message(username)
                await asyncio.sleep(2)
                response = await conv.get_response()

                if match := re.search(r'(\d+:[a-zA-Z0-9_-]+)', response.text):
                    token = match.group(1)
                    user_id = token.split(':')[0]
                    
                    self.BOT_TOKEN_FILE.write_text(f"{username}:{user_id}:{token}")
                    await self.set_bot_photo(username)
                    return username, user_id, token

            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±–æ—Ç–∞: {e}")
                return None, None, None

    async def run(self) -> None:
        try:
            # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
            await self.ensure_connection()
            
            if not await self.client.is_user_authorized():
                print("\nüîê –¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è")
                phone = await self.async_input("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (+7XXX...): ")
                
                while not phone.startswith('+'):
                    print("‚ùå –ù–æ–º–µ—Ä –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å '+'")
                    phone = await self.async_input("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (+7XXX...): ")
                
                try:
                    await self.client.send_code_request(phone)
                    code = await self.async_input("–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –∏–∑ SMS: ")
                    
                    try:
                        await self.client.sign_in(phone=phone, code=code)
                    except errors.SessionPasswordNeededError:
                        password = await self.async_input("–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å 2FA: ")
                        await self.client.sign_in(password=password)
                
                except Exception as e:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {e}")
                    return

            me = await self.client.get_me()
            print(f"\n‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –∫–∞–∫: {me.first_name}")

            # –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º
            if not self.BOT_TOKEN_FILE.exists():
                choice = await self.async_input("–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–≥–æ –±–æ—Ç–∞? (–¥–∞/–Ω–µ—Ç): ")
                if choice.lower() in ('–¥–∞', '–¥', 'yes', 'y'):
                    result = await self.create_new_bot()
                    if not result:
                        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –±–æ—Ç–∞")
                        return
                    print(f"‚úÖ –ë–æ—Ç @{result[0]} —Å–æ–∑–¥–∞–Ω!")
                else:
                    print("‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è —Ç–æ–∫–µ–Ω –±–æ—Ç–∞")
                    return
            else:
                content = self.BOT_TOKEN_FILE.read_text().strip()
                if content.count(':') >= 2:
                    username, user_id, token = content.split(':', 2)
                    print(f"‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –±–æ—Ç @{username}")

            # –ó–∞–ø—É—Å–∫ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –º–æ–¥—É–ª–µ–π
            try:
                from modules import main as modules_main
                print("\nüöÄ –ó–∞–ø—É—Å–∫ –º–æ–¥—É–ª–µ–π...")
                await modules_main(self.client)
            except ImportError:
                print("‚ÑπÔ∏è –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–æ–¥—É–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")

        except KeyboardInterrupt:
            print("\nüõë –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        except Exception as e:
            print(f"\nüõë –û—à–∏–±–∫–∞: {e}")
        finally:
            if self.client.is_connected():
                await self.client.disconnect()
                print("üîå –û—Ç–∫–ª—é—á–µ–Ω–æ –æ—Ç Telegram")


if __name__ == '__main__':
    try:
        bot = BotManager()
        asyncio.run(bot.run())
    except KeyboardInterrupt:
        print("\nüõë –°–∫—Ä–∏–ø—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    except Exception as e:
        print(f"üõë –§–∞—Ç–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
