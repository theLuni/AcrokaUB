import asyncio
import os
import re
import random
import string
from pathlib import Path
from typing import Optional, Tuple
import getpass

import aiohttp
from telethon import TelegramClient, errors
from telethon.errors import FloodWaitError, RPCError
from config import API_ID, API_HASH


class BotManager:
    def __init__(self):
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º Path –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø—É—Ç—è–º–∏
        self.BASE_DIR = Path(__file__).parent.resolve()
        self.SOURCE_DIR = self.BASE_DIR / 'source'
        self.SOURCE_DIR.mkdir(exist_ok=True)
        
        self.BOT_TOKEN_FILE = self.SOURCE_DIR / 'bottoken.txt'
        self.BOT_IMAGE = self.SOURCE_DIR / 'pic.png'
        self.PREFIX_FILE = self.SOURCE_DIR / 'prefix.txt'
        self.DEFAULT_PREFIX = '.'
        
        try:
            self.client = TelegramClient(f'acroka_session_{API_ID}', API_ID, API_HASH)
        except Exception as e:
            raise RuntimeError(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Telegram –∫–ª–∏–µ–Ω—Ç–∞: {e}")

    async def async_input(self, prompt: str = "") -> str:
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –∑–∞–º–µ–Ω–∞ –¥–ª—è input()"""
        print(prompt, end="", flush=True)
        return (await asyncio.get_event_loop().run_in_executor(None, lambda: input())).strip()

    async def sleep(self, delay: float = 1.0) -> None:
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞"""
        await asyncio.sleep(delay)

    def get_prefix(self) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–µ—Ñ–∏–∫—Å–∞ –∫–æ–º–∞–Ω–¥"""
        try:
            if self.PREFIX_FILE.exists():
                prefix = self.PREFIX_FILE.read_text().strip()
                return prefix if len(prefix) == 1 else self.DEFAULT_PREFIX
            return self.DEFAULT_PREFIX
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞ –ø—Ä–µ—Ñ–∏–∫—Å–∞: {e}")
            return self.DEFAULT_PREFIX

    async def create_new_bot(self) -> Tuple[Optional[str], Optional[str], Optional[str]]:
        """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –±–æ—Ç–∞ —á–µ—Ä–µ–∑ BotFather"""
        print("üõ†Ô∏è –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –±–æ—Ç–∞...")
        
        async def handle_conversation_step(conv, message: str, expected_response: str = None) -> Optional[str]:
            """–û–±—Ä–∞–±–æ—Ç–∫–∞ —à–∞–≥–∞ –¥–∏–∞–ª–æ–≥–∞"""
            try:
                await conv.send_message(message)
                await self.sleep(2)
                response = await conv.get_response()
                
                if expected_response and expected_response not in response.text:
                    print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç BotFather: {response.text}")
                    return None
                return response.text
            except FloodWaitError as e:
                print(f"‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –∏–∑-–∑–∞ —Ñ–ª—É–¥–∞: {e.seconds} —Å–µ–∫—É–Ω–¥")
                await asyncio.sleep(e.seconds + 5)
                return None
            except RPCError as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ RPC: {e}")
                return None
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –≤ –¥–∏–∞–ª–æ–≥–µ: {e}")
                return None

        try:
            async with self.client.conversation('BotFather', timeout=30) as conv:
                if not await handle_conversation_step(conv, '/newbot', "Alright"):
                    return None, None, None

                if not await handle_conversation_step(conv, 'Acroka Helper Bot'):
                    return None, None, None

                username = self.generate_username()
                response_text = await handle_conversation_step(conv, username, "Done!")
                if not response_text:
                    return None, None, None

                if match := re.search(r'(\d+:[a-zA-Z0-9_-]+)', response_text):
                    token = match.group(1)
                    user_id = token.split(':')[0]
                    
                    try:
                        self.BOT_TOKEN_FILE.write_text(f"{username}:{user_id}:{token}")
                    except Exception as e:
                        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞: {e}")
                        return None, None, None

                    await self.set_bot_photo(username)
                    print(f"‚úÖ –ë–æ—Ç @{username} —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!")
                    return username, user_id, token

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –±–æ—Ç–∞: {e}")
            return None, None, None

    def generate_username(self) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–º–µ–Ω–∏ –±–æ—Ç–∞"""
        chars = string.ascii_lowercase + string.digits
        return f'acroka_{"".join(random.choices(chars, k=8))}_bot'

    async def set_bot_photo(self, username: str) -> bool:
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞–≤–∞—Ç–∞—Ä–∫–∏"""
        if not self.BOT_IMAGE.exists():
            print(f"‚ö†Ô∏è –§–∞–π–ª –∞–≤–∞—Ç–∞—Ä–∫–∏ {self.BOT_IMAGE} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return False

        try:
            async with self.client.conversation('BotFather', timeout=30) as conv:
                steps = [('/setuserpic', None), (f'@{username}', None), (self.BOT_IMAGE, None)]
                
                for message, _ in steps:
                    try:
                        if isinstance(message, str):
                            await conv.send_message(message)
                        else:
                            await conv.send_file(message)
                        await self.sleep(2)
                        await conv.get_response()
                    except Exception as e:
                        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∞–≤–∞—Ç–∞—Ä–∫–∏: {e}")
                        return False

                print("üñºÔ∏è –ê–≤–∞—Ç–∞—Ä–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!")
                return True
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {e}")
            return False

    async def load_existing_bot(self, username: str) -> Tuple[Optional[str], Optional[str]]:
        """–ó–∞–≥—Ä—É–∑–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –±–æ—Ç–∞"""
        print(f"üîç –ó–∞–≥—Ä—É–∑–∫–∞ –±–æ—Ç–∞ @{username}...")
        
        try:
            async with self.client.conversation('BotFather', timeout=30) as conv:
                await conv.send_message('/token')
                await self.sleep(2)
                await conv.get_response()
                
                await conv.send_message(f'@{username}')
                await self.sleep(2)
                response = await conv.get_response()

                if match := re.search(r'(\d+:[a-zA-Z0-9_-]+)', response.text):
                    token = match.group(1)
                    user_id = token.split(':')[0]
                    
                    try:
                        self.BOT_TOKEN_FILE.write_text(f"{username}:{user_id}:{token}")
                    except Exception as e:
                        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞: {e}")
                        return None, None

                    await self.set_bot_photo(username)
                    print(f"‚úÖ –ë–æ—Ç @{username} –∑–∞–≥—Ä—É–∂–µ–Ω!")
                    return username, token

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ: {e}")
        return None, None

    async def check_bot_token(self, token: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞"""
        url = f'https://api.telegram.org/bot{token}/getMe'
        
        try:
            async with aiohttp.ClientSession() as session:
                async with session.get(url, timeout=aiohttp.ClientTimeout(total=10)) as resp:
                    return resp.status == 200 and (await resp.json()).get('ok', False)
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–æ–∫–µ–Ω–∞: {e}")
            return False

    async def run(self) -> None:
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª —Ä–∞–±–æ—Ç—ã"""
        try:
            # –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
            if not await self.client.is_user_authorized():
                print("\nüîê –¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è")
                
                while True:
                    try:
                        phone = await self.async_input("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (+7XXX...): ")
                        if not phone.startswith('+'):
                            print("‚ùå –ù–æ–º–µ—Ä –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å '+'")
                            continue
                            
                        await self.client.send_code_request(phone)
                        break
                    except Exception as e:
                        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

                while True:
                    try:
                        code = await self.async_input("–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –∏–∑ SMS: ")
                        try:
                            await self.client.sign_in(phone=phone, code=code)
                            break
                        except errors.SessionPasswordNeededError:
                            password = await self.async_input("–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å 2FA: ")
                            await self.client.sign_in(password=password)
                            break
                    except errors.PhoneCodeInvalidError:
                        print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥")
                    except Exception as e:
                        print(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {e}")
                        return

            me = await self.client.get_me()
            print(f"\n‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –∫–∞–∫: {me.first_name}")

            # –†–∞–±–æ—Ç–∞ —Å –±–æ—Ç–æ–º
            if not self.BOT_TOKEN_FILE.exists() or not self.BOT_TOKEN_FILE.stat().st_size:
                print("\n‚ÑπÔ∏è –§–∞–π–ª —Ç–æ–∫–µ–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω")
                choice = await self.async_input("–°–æ–∑–¥–∞—Ç—å (1) –∏–ª–∏ –∑–∞–≥—Ä—É–∑–∏—Ç—å (2) –±–æ—Ç–∞? [1/2]: ")
                
                if choice.strip() == '2':
                    username = await self.async_input("–í–≤–µ–¥–∏—Ç–µ @username: ").strip()
                    if not username:
                        print("‚ùå –ò–º—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ")
                        return
                        
                    result = await self.load_existing_bot(username)
                    if not result:
                        return
                    username, token = result
                    print(f"‚úÖ –ë–æ—Ç @{username} –∑–∞–≥—Ä—É–∂–µ–Ω")
                else:
                    result = await self.create_new_bot()
                    if not result:
                        return
                    username, user_id, token = result
            else:
                try:
                    content = self.BOT_TOKEN_FILE.read_text().strip()
                    if content.count(':') >= 2:
                        username, user_id, token = content.split(':', 2)
                        if not await self.check_bot_token(token):
                            print("‚ùå –ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω")
                            return
                        print(f"‚úÖ –ù–∞–π–¥–µ–Ω –±–æ—Ç @{username}")
                    else:
                        print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–æ–∫–µ–Ω–∞")
                        return
                except Exception as e:
                    print(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞: {e}")
                    return

            # –ó–∞–ø—É—Å–∫ –º–æ–¥—É–ª–µ–π
            try:
                from modules import main as modules_main
                print("\nüöÄ –ó–∞–ø—É—Å–∫ –º–æ–¥—É–ª–µ–π...")
                await modules_main(self.client)
            except ImportError as e:
                print(f"‚ùå –ú–æ–¥—É–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã: {e}")
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –º–æ–¥—É–ª–µ–π: {e}")

        except KeyboardInterrupt:
            print("\nüõë –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        except Exception as e:
            print(f"\nüõë –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        finally:
            if self.client.is_connected():
                await self.client.disconnect()
                print("üîå –û—Ç–∫–ª—é—á–µ–Ω–æ")


if __name__ == '__main__':
    try:
        bot = BotManager()
        asyncio.run(bot.run())
    except KeyboardInterrupt:
        print("\nüõë –°–∫—Ä–∏–ø—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    except Exception as e:
        print(f"üõë –§–∞—Ç–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
